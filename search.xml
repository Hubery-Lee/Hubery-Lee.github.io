<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[How to Use Hit to Get Primary Information in Geant4]]></title>
    <url>%2F2018%2F09%2F23%2FHow-to-Use-Hit-to-Get-Primary-Information-in-Geant4%2F</url>
    <content type="text"><![CDATA[Contact lihui to get the password. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>geant4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Use Root to Draw 3D Histogram]]></title>
    <url>%2F2018%2F09%2F23%2FHow-to-Use-Root-to-Draw-3D-Histogram%2F</url>
    <content type="text"><![CDATA[ReferrenceRoot/tutoriors/gl/glvox2.C Results Shows]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>root</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gean4 Data Read Out Methods]]></title>
    <url>%2F2018%2F09%2F17%2FG4DataReadOutMethods%2F</url>
    <content type="text"><![CDATA[Introduction of Data Aquisition Methods in Geant4 Simulation G4ScoringManager SteppingAction TrackingAction SensitiveDetctor + HitCollection More detail information about these methods to get data can you refer to this site 12345678910111213141516171819202122232425A: To get the information at tracking time in a given volume A, one can adopt either one or a combination of the following strategies:1. If the geometry is simple enough, and wish to score some commonly used physics quantities (e.g. energy deposition, dose, flux, etc.), just activate G4ScoringManager in your main program, and use the scorer-based UI commands to transform volume A into a scorer. See Option 6 below, and the example examples/extended/runAndEvent/RE03.2. Through the SteppingAction, check that the particle is inside volume A and do whatever needed. Hints can be found in the previous chapter of this FAQ document. Usually, the hits containers and histograms are attributes of a Track, Event or Run and can be managed through either a TrackingAction, EventAction and/or RunAction and eventually messaging their pointer to the SteppingAction. A similar approach is illustrated in examples/basic/B2, B4, extended/electromagnetic, optical, and many others…3. In DetectorConstruction, by declaring volume A as a SensitiveDetector. At stepping time, the Geant4 kernel will automatically check that a particle is inside volume A and will handle the control to a specific function G4VSensitiveDetector::ProcessHits(). It is just necessary to instanciate a class inherited from G4VSensitiveDetector, say VolumeA_SD, and do whatever needed by implementing the function VolumeA_SD::ProcessHits(), as described in Option 2 above.4. In addition to Option 3 above, should create a HitsCollection to store the information. A HitsCollection can be created in VolumeA_SD::Initialize(). A Hit can be created or filled in VolumeA_SD::ProcessHits(). Additional operations on HitsCollection can be performed in VolumeA_SD::EndOfEvent(). This approach is illustrated in examples/basic/B2, B4 and extended/analysis, extended/runAndEvent/RE01, etc…5. In DetectorConstruction, volume A can be declared as SensitiveDetector, and one or several pre-defined scorers can be attached to volume A. In this case, neither a SteppingAction nor a spcific VolumeA_SD sensitive detector is needed any longer. It is just necessary to create a dedicated scorer, e.g. MyRunScorer, inherited from G4Run, and handle the HitsCollections within MyRunScorer::RecordEvent(). MyRunScorer itself can be instanciated from RunAction::GenerateRun(). This approach is illustrated in examples/novice/N07, extended/runAndEvent/RE02.6. A set of build-in scorer-based UI commands allows to perform most possible operations described through the previous Option 5 directly from run-time macros. See example extended/runAndEvent/RE03. Detector Response对于Geant4模拟数据输出与存储可以参看examples/basic/B4,对于不同的数据输出方式，看该文件夹下的README. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182836- DETECTOR RESPONSE The energy deposit and track lengths of the charged particles are recorded on an event by event basis in the Absober and Gap layers. In order to demonstrate several possible ways of data scoring, the example is provided in four variants: Variant a: User Actions These 4 quantities are data members of the B4aEventAction class. They are collected step by step in B4aSteppingAction::UserSteppingAction(), and passed to the event action via two methods: B4aEventAction::AddAbs() and B4aEventAction::AddGap(). In B4aEventAction::EndOfEventAction(), these quantities are printed and filled in H1D histograms and ntuple to accumulate statistic and compute dispersion. Variant b: User data object In order to avoid dependencies between action classes, a user object B4bRunData, derived from G4Run, is defined with data members needed for the accounted information. In order to reduce the number of data members a 2-dimensions array is introduced for each quantity. Then the quantities are collected step by step in user action classes: B4bSteppingAction::UserSteppingAction() and B4bEventAction::EndOfEventAction() in a similar way as in variant a. Variant c: Hits and Sensitive detectors In this option, the physics quantities are accounted using the hits and sensitive detectors framework defined in the Geant4 kernel. The physics quantities are stored in B4cCalorHit via two B4cCalorimeterSD objects, one associated with the Absorber volume and another one with Gap in B4cDetectorConstruction::ConstructSDandField(). In contrary to the B2 example (Tracker) where a new hit is created with each track passing the sensitive volume (in the calorimeter), only one hit is created for each calorimeter layer and one more hit to account for the total quantities in all layers. In addition to the variants a and b, the quantities per each layer are also available in addition to the total quantities. Variant d: Scorer In this option, the Geant4 scorers which are defined on the top of hits and sensitive detectors Geant4 framework are used. In practice this means that the user does not need to define hits and sensitive detector classes but rather uses the classes already defined in Geant4. In this example, the G4MultiFunctionalDetector with G4PSEnergyDeposit and G4PSTrackLength primitive scores are used (see B4dDetectorConstruction::ConstructSDandField()). Also with this approach, the quantities per each layer are available in addition to the total quantities. 7- HISTOGRAMS The analysis tools are used to accumulate statistics and compute the dispersion of the energy deposit and track lengths of the charged particles. H1D histograms are created in B4[b]RunAction::B4[b]RunAction() for the following quantities: - Energy deposit in absorber - Energy deposit in gap - Track length in absorber - Track length in gap The same values are also saved in an ntuple. The histograms and the ntuple are saved in the output file in a format according to a technology selected in B4Analysis.hh, the default in this example is ROOT. The accumulated statistic and computed dispersion is printed at the end of run, in B4RunAction::EndOfRunAction(). When running in multi-threading mode, the histograms and the ntuple accumulated on threads are merged in a single output file. While merging of histograms is performed by default, merging of ntuples is explicitly activated in the B4RunAction constructor. The ROOT histograms and ntuple can be plotted with ROOT using the plotHisto.C and plotNtuple.C macros. Geant4 Simulation Data ReadOut by SensitiveDetctor + HitCollection MethodsRunAction RunAction() ~RunAction() BegingOfRunAction(const G4Run *) EndOfRunAction(const G4Run *) 该方式的数据输出与存储参看examples/basic/B4/B4c RunAction() 构造函数打开和关闭数据存储文件，在RunAction中； 123456789101112131415161718192021222324252627282930313233343536373839// set printing event number per each eventG4RunManager::GetRunManager()-&gt;SetPrintProgress(1);// Create analysis manager// The choice of analysis technology is done via selectin of a namespace// in B4Analysis.hhauto analysisManager = G4AnalysisManager::Instance();G4cout &lt;&lt; &quot;Using &quot; &lt;&lt; analysisManager-&gt;GetType() &lt;&lt; G4endl;analysisManager-&gt;SetVerboseLevel(1);analysisManager-&gt;SetNtupleMerging(true); // Note: merging ntuples is available only with Root output// Book ntuples //Declare ntuples// Creating 1st ntuple//analysisManager-&gt;CreateNtuple(&quot;Det&quot;, &quot;xyz in Det&quot;);analysisManager-&gt;CreateNtupleSColumn(&quot;SDName&quot;);analysisManager-&gt;CreateNtupleIColumn(&quot;EventID&quot;);analysisManager-&gt;CreateNtupleIColumn(&quot;ParentID&quot;);analysisManager-&gt;CreateNtupleIColumn(&quot;TrackID&quot;);analysisManager-&gt;CreateNtupleIColumn(&quot;StepID&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;Edep&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;PosX&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;PosY&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;PosZ&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;GlobalT&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;LocalT&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;ProperT&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;Ekin&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;Velocity&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;MomentX&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;MomentY&quot;);analysisManager-&gt;CreateNtupleDColumn(&quot;MomentZ&quot;);analysisManager-&gt;CreateNtupleSColumn(&quot;ProC&quot;);analysisManager-&gt;FinishNtuple(); 主要设置模拟运行参数，运行显示、多线程文件合并等； 注意B4c中将内容目录也在构造函数中创建，文件的创建在BeginOfRunAction()中。 ~RunAction() 析构函数1delete G4AnalysisManager::Instance(); BeginOfRunAction(const G4Run*)1234567// Get analysis managerauto analysisManager = G4AnalysisManager::Instance();// Open an output file//G4String fileName = &quot;APNIS&quot;;analysisManager-&gt;OpenFile(fileName); 新建储存文件并打开文件 EndOfRunAction(const G4Run*)123456auto analysisManager = G4AnalysisManager::Instance();// save histograms &amp; ntuple//analysisManager-&gt;Write();analysisManager-&gt;CloseFile(); 一个Run结束后的写文件 EventAction采用SD+HitCollection方式存储数据，记录的是一个Event的所有Hit点的数据，那么Geant4中数据的存储就在EventAction中进行； 当然，如果你采用StepAction方式存储数据，你只需在StepAction中去存储数据就行了； EventAction() ~EventAction() BeginOfEventAction(const G4Event*) EndOfEventAction(const G4Event*)12345678• beginOfEventAction() This method is invoked before converting the primary particles to G4Trackobjects. A typical use of this method would be to initialize and/or book histograms for a particular event.• endOfEventAction() This method is invoked at the very end of event processing. It is typically used fora simple analysis of the processed event. If the user wants to keep the currently processing event untilthe end of the current run, the user can invoke fpEventManager-&gt;KeepTheCurrentEvent(); sothat it is kept in G4Run object. This should be quite useful if you simulate quite many events and want tovisualize only the most interest ones after the long execution. Given the memory size of an event and itscontents may be large, it is the user’s responsibility not to keep unnecessary events. EndOfEventAction(const G4Event*)在每个Event结束时，将Hit数据存储写到存储文件中。首先获取这个Event有多少个HitCollection,（HitCollection编号HCID在Event开始前获得，在BegingOfEventAction()中定义），然后根据HCID查找对应的HitCollection，根据不同HitCollection的大小提取数据并写入到文件； 12345678910111213141516G4HCofThisEvent * HCE = event-&gt;GetHCofThisEvent();//获得Event结束时，所有的HitCollection//根据HitCollecitonID名称，获取不同的CollectionIDif(HCE)&#123;PrimaryHC = (PLANETOCOSPrimaryHitsCollection*)(HCE-&gt;GetHC(primaryCollID));FluxHC = (PLANETOCOSFluxHitsCollection*)(HCE-&gt;GetHC(fluxdetectorCollID));//FluxHC = (PLANETOCOSFluxHitsCollection*)(HCE-&gt;GetHC(1));//G4cout&lt;&lt;&quot;ANALYSE1&quot;&lt;&lt;std::endl;EdepHC = (PLANETOCOSEdepHitsCollection*)(HCE-&gt;GetHC(edepCollID));SoilEdepHC = (PLANETOCOSEdepHitsCollection*)(HCE-&gt;GetHC(edepSoilCollID));//EdepHC = (PLANETOCOSEdepHitsCollection*)(HCE-&gt;GetHC(2));PostTrackHC = (PLANETOCOSPostTrackHitsCollection*)(HCE-&gt;GetHC(post_trackCollID));//PostTrackHC = (PLANETOCOSPostTrackHitsCollection*)(HCE-&gt;GetHC(3));&#125; BeginOfEventAction(const G4Event*)在Event开始前的行为，可以写在这个函数中；如下，获得不同HitCollection的编码HCID；注意，不同的HitCollection 对应不同的SD；12345678 G4SDManager * SDman = G4SDManager::GetSDMpointer(); if(edepCollID&lt;0||primaryCollID&lt;0||fluxdetectorCollID&lt;0 ||post_trackCollID &lt;0 || edepSoilCollID&lt;0)&#123; edepCollID = SDman-&gt;GetCollectionID(&quot;edepCol&quot;);edepSoilCollID = SDman-&gt;GetCollectionID(&quot;edepSoilCol&quot;);primaryCollID = SDman-&gt;GetCollectionID(&quot;primaryCol&quot;); fluxdetectorCollID = SDman-&gt;GetCollectionID(&quot;detCol&quot;);post_trackCollID = SDman-&gt;GetCollectionID(&quot;post_trackCol&quot;); &#125; 当不考虑不同的SD，对所以SD的detector的响应都一样时采用如下方法读取数据；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990/////////////////////////////////////////////void APNISEventAction::EndOfEventAction(const G4Event* event)&#123; G4HCofThisEvent * hce = event-&gt;GetHCofThisEvent(); if (!hce) &#123; G4ExceptionDescription msg; msg &lt;&lt; &quot;No hits collection of this event found.&quot; &lt;&lt; G4endl; G4Exception(&quot;APNISEventAction::EndOfEventAction()&quot;, &quot;APNISCode001&quot;, JustWarning, msg); return; &#125; //get hit collection if(hce) &#123; size_t nHCE=hce-&gt;GetCapacity(); for(size_t i=0;i&lt;nHCE;i++)&#123;//多个SD时用 APNISTrackHitsCollection *HC =0; HC = (APNISTrackHitsCollection *)(hce-&gt;GetHC(i)); if(HC) OneHitOrder(HC);//写数据 &#125; &#125; &#125;////////////////////////////////////////////////////////////////void APNISEventAction::OneHitOrder(APNISTrackHitsCollection*HC)&#123; ////////////////////////////////////////// // // Fill histograms &amp; ntuple // ////////////////////////////////////////// // get analysis manager auto analysisManager = G4AnalysisManager::Instance(); //analyse G4int n_hit = HC-&gt;entries(); for(G4int i=0;i&lt;n_hit;i++) &#123; G4String SDName =(*HC)[i]-&gt;GetSDName(); G4int EventID=(*HC)[i]-&gt;GetEventID();// G4int ParentID=(*HC)[i]-&gt;GetParentID();// G4int TrackID=(*HC)[i]-&gt;GetTrackID();// G4int StepID=(*HC)[i]-&gt;GetStepID();// // Total steps number up to now G4double fEdep=(*HC)[i]-&gt;GetEdep(); G4ThreeVector fPos=(*HC)[i]-&gt;GetPos(); G4double GlobalTime=(*HC)[i]-&gt;GetGlobalTime();// //Time since event is created G4double LocalTime=(*HC)[i]-&gt;GetLocalTime();// // Time since track is created G4double ProperTime=(*HC)[i]-&gt;GetProperTime();// // Time since track is created (in rest frame of particle) G4double Ekin=(*HC)[i]-&gt;GetEkin();// G4double Velocity=(*HC)[i]-&gt;GetVelocity();// G4ThreeVector MomentumDirection = (*HC)[i]-&gt;GetMomentumDirection(); // Direction of momentum G4String CreatorProcess=(*HC)[i]-&gt;GetCreatorProcess();// //塞选思路 //存储数据 // fill ntuple G4int Count=0; analysisManager-&gt;FillNtupleSColumn(Count,SDName);Count++; analysisManager-&gt;FillNtupleIColumn(Count,EventID);Count++; analysisManager-&gt;FillNtupleIColumn(Count,ParentID);Count++; analysisManager-&gt;FillNtupleIColumn(Count,TrackID);Count++; analysisManager-&gt;FillNtupleIColumn(Count,StepID);Count++; analysisManager-&gt;FillNtupleDColumn(Count,fEdep/MeV);Count++; analysisManager-&gt;FillNtupleDColumn(Count,fPos.x()/m);Count++; analysisManager-&gt;FillNtupleDColumn(Count,fPos.y()/m);Count++; analysisManager-&gt;FillNtupleDColumn(Count,fPos.z()/m);Count++; analysisManager-&gt;FillNtupleDColumn(Count,GlobalTime/s);Count++; analysisManager-&gt;FillNtupleDColumn(Count,LocalTime/s);Count++; analysisManager-&gt;FillNtupleDColumn(Count,ProperTime/s);Count++; analysisManager-&gt;FillNtupleDColumn(Count,Ekin/MeV);Count++; analysisManager-&gt;FillNtupleDColumn(Count,Velocity/(m/s));Count++; analysisManager-&gt;FillNtupleDColumn(Count,MomentumDirection.x());Count++; analysisManager-&gt;FillNtupleDColumn(Count,MomentumDirection.y());Count++; analysisManager-&gt;FillNtupleDColumn(Count,MomentumDirection.z());Count++; analysisManager-&gt;FillNtupleSColumn(Count,CreatorProcess);Count++; // analysisManager-&gt;FillNtupleIColumn(Count,);Count++; // analysisManager-&gt;FillNtupleDColumn(Count,);Count++; // analysisManager-&gt;FillNtupleSColumn(Count,);Count++; analysisManager-&gt;AddNtupleRow(); &#125;&#125; Hit参考Book for applicaiton中的4.4 Hits A hit is a snapshot of the physical interaction of a track in the sensitive region of a detector. In it you can storeinformation associated with a G4Step object. This information can be the position and time of the step, the momentum and energy of the track, the energy deposition of the step, geometrical information, or any combination of the above. 简而言之 G4中的Hit &lt;==&gt; C++中的vector ，G4Allocator会给Hit分配内存空间； G4中的Map &lt;==&gt; C++中的map Hit.hh头文件结构1234567891011121314151617181920212223242526272829APNISTrackHit();APNISTrackHit(const APNISTrackHit &amp;right);virtual ~APNISTrackHit();//operatorconst APNISTrackHit&amp; operator=(const APNISTrackHit &amp;right);G4int operator ==(const APNISTrackHit &amp;right)const;inline void *operator new(size_t);inline void operator delete(void *aHit);//获取数据inline void SetSDName(G4String name)&#123;SDName=name;&#125;inline const G4String&amp; GetSDName() const&#123;return SDName;&#125;inline void SetEventID(G4int id)&#123;EventID=id;&#125;//okinline G4int GetEventID() const&#123;return EventID;&#125;//inline void SetParentID(G4int id)&#123;ParentID=id;&#125;//okinline G4int GetParentID() const&#123;return ParentID;&#125;//inline void SetTrackID(G4int id)&#123;TrackID=id;&#125;//okinline G4int GetTrackID() const&#123;return TrackID;&#125;//inline void SetStepID(G4int id)&#123;CurrentStepNumber=id;&#125;//okinline G4int GetStepID() const&#123;return CurrentStepNumber;&#125;//inline void SetEdep(G4double de)&#123; fEdep = de; &#125;inline G4double GetEdep()&#123; return fEdep; &#125;... 分配HitCollection存储空间，新建内存空间用完后并释放内存空间； 123456789101112131415///////////////////////////////////////////////////////////////typedef G4THitsCollection&lt;APNISTrackHit&gt; APNISTrackHitsCollection;extern G4ThreadLocal G4Allocator&lt;APNISTrackHit&gt;* APNISTrackHitAllocator;//////////////////////////////////////////////////////////////inline void* APNISTrackHit::operator new(size_t)&#123; if(!APNISTrackHitAllocator) APNISTrackHitAllocator = new G4Allocator&lt;APNISTrackHit&gt;; return (void *)APNISTrackHitAllocator-&gt;MallocSingle();&#125;inline void APNISTrackHit::operator delete(void* aHit)&#123; APNISTrackHitAllocator-&gt;FreeSingle((APNISTrackHit*)aHit);&#125; Hit.cc12345678910111213141516171819202122232425262728293031////////////////////////////////////////////////////////APNISTrackHit::APNISTrackHit(const APNISTrackHit &amp;right):G4VHit()&#123; SDName =right.SDName; EventID=right.EventID; ParentID =right.ParentID; TrackID =right.TrackID; CurrentStepNumber =right.CurrentStepNumber; fEdep = right.fEdep; ...&#125;//////////////////////////////////////////////////////////// operatorconst APNISTrackHit&amp; APNISTrackHit::operator=(const APNISTrackHit &amp;right)&#123; SDName =right.SDName; EventID=right.EventID; ParentID =right.ParentID; TrackID =right.TrackID; CurrentStepNumber =right.CurrentStepNumber; fEdep = right.fEdep; ... return *this;&#125;////////G4int APNISTrackHit::operator==(const APNISTrackHit &amp;right) const&#123; return (this==&amp;right) ? 1 : 0;&#125; SensitiveDetectorSD的作用时根据Step和Track信息，构建Hit信息；SD有以下一些函数： ProcessHits() Initialize() EndOfEvent() ProcessHits(G4Step aStep, G4TouchableHistory)在ProcessHits()中将数据存入Hit()申明的存储空间中; 1234567891011ProcessHits() This method is invoked by G4SteppingManager when a step is composed in theG4LogicalVolume which has the pointer to this sensitive detector. The first argument of this method isa G4Step object of the current step. The second argument is a G4TouchableHistory object for theReadout geometry described in the next section. The second argument is NULL if Readout geometryis not assigned to this sensitive detector. In this method, one or more G4VHit objects should be constructed ifthe current step is meaningful for your detector.Initialize() This method is invoked at the beginning of each event. The argument of this method is an objectof the G4HCofThisEvent class. Hit collections, where hits produced in this particular event are stored,can be associated with the G4HCofThisEvent object in this method. The hit collections associated withthe G4HCofThisEvent object during this method can be used for during the event processingdigitization. example1234567891011121314151617181920212223242526272829303132333435363738 G4StepPoint* preStepPoint=aStep-&gt;GetPreStepPoint(); G4StepPoint* postStepPoint=aStep-&gt;GetPostStepPoint(); G4Track* aTrack=aStep-&gt;GetTrack(); // G4double edep = aStep-&gt;GetTotalEnergyDeposit(); // if(edep==0.) return false; G4ParticleDefinition* theparticle=aStep-&gt;GetTrack()-&gt;GetDefinition(); G4String PName=theparticle-&gt;GetParticleName(); G4TouchableHandle touch1 = preStepPoint-&gt;GetTouchableHandle(); G4VPhysicalVolume* volume = touch1-&gt;GetVolume();if(preStepPoint-&gt;GetStepStatus()==fGeomBoundary) &#123; // if(volume-&gt;GetName()==&quot;AirDet&quot;) // &#123; APNISTrackHit* newHit1 = new APNISTrackHit(); // G4cout&lt;&lt;&quot;####----In AirDet----&quot;&lt;&lt;SensitiveDetectorName&lt;&lt;G4endl; newHit1-&gt;SetSDName(volume-&gt;GetName()); newHit1-&gt;SetEventID(G4EventManager::GetEventManager()-&gt;GetConstCurrentEvent()-&gt;GetEventID());//ok newHit1-&gt;SetParentID(aTrack-&gt;GetParentID());//ok newHit1-&gt;SetTrackID(aTrack-&gt;GetTrackID());//ok newHit1-&gt;SetStepID(aTrack-&gt;GetCurrentStepNumber());//ok newHit1-&gt;SetEdep( aStep-&gt;GetTotalEnergyDeposit() ); newHit1-&gt;SetPos( aStep-&gt;GetPreStepPoint()-&gt;GetPosition()); newHit1-&gt;SetGlobalTime(preStepPoint-&gt;GetGlobalTime());//ok newHit1-&gt;SetLocalTime(preStepPoint-&gt;GetLocalTime());//ok newHit1-&gt;SetProperTime(preStepPoint-&gt;GetProperTime());//ok newHit1-&gt;SetEkin(preStepPoint-&gt;GetKineticEnergy());//ok newHit1-&gt;SetVelocity(preStepPoint-&gt;GetVelocity());//ok newHit1-&gt;SetMomentumDirection(preStepPoint-&gt;GetMomentumDirection());//ok const G4VProcess* pcr=aTrack-&gt;GetCreatorProcess(); if(pcr)newHit1-&gt;SetCreatorProcess(pcr-&gt;GetProcessName()); else newHit1-&gt;SetCreatorProcess(&quot;##&quot;);//ok //数据存储到HitCollection中 fTrackHitCollection-&gt;insert( newHit1 ); &#125; Initialize(G4HCofThisEvent* HCE)初始化HitsCollection，将数据存入HitsCollection前都需将空间初始化12345Initialize() This method is invoked at the beginning of each event. The argument of this method is an objectof the G4HCofThisEvent class. Hit collections, where hits produced in this particular event are stored,can be associated with the G4HCofThisEvent object in this method. The hit collections associated withthe G4HCofThisEvent object during this method can be used for during the event processingdigitization. example123456789void PLANETOCOSSoilSD::Initialize(G4HCofThisEvent*HCE)&#123; static int HCID = -1; SoilEdepHitCollection = new PLANETOCOSEdepHitsCollection (SensitiveDetectorName,collectionName[0]); HCID = GetCollectionID(0); HCE-&gt;AddHitsCollection(HCID,SoilEdepHitCollection);&#125; 1234567891011121314151617void B4cCalorimeterSD::Initialize(G4HCofThisEvent* hce)&#123; // Create hits collection fHitsCollection = new B4cCalorHitsCollection(SensitiveDetectorName, collectionName[0]); // Add this collection in hce auto hcID = G4SDManager::GetSDMpointer()-&gt;GetCollectionID(collectionName[0]); hce-&gt;AddHitsCollection( hcID, fHitsCollection ); // Create hits // fNofCells for cells + one more for total sums for (G4int i=0; i&lt;fNofCells+1; i++ ) &#123; fHitsCollection-&gt;insert(new B4cCalorHit()); &#125;&#125; 123456789101112131415void APNISTrackSD::Initialize(G4HCofThisEvent* HCE)&#123; // static int HCID = -1; fTrackHitCollection = new APNISTrackHitsCollection (SensitiveDetectorName,collectionName[0]); // if(HCID&lt;0) // &#123; HCID = GetCollectionID(0); &#125; // get the collection name according to the object(name). if(HCID&lt;0)&#123; HCID = G4SDManager::GetSDMpointer() -&gt;GetCollectionID(fTrackHitCollection); &#125; HCE-&gt;AddHitsCollection(HCID,fTrackHitCollection);&#125; 结语到这里，数据文件打开，写入；数据的传递与存储就介绍完了；RunAction中实现对数据文件的打开与关闭；EventAction中实现将数据写入到文件，当然，如果你采用SteppingAction方式也可以将数据写入文件（此文不再介绍）；Hit中实现给需要传递的数据分配内存空间；SensitiveDetector中实现将数据传递给Hit分配的内存空间；如果将这个问题表述为送快递的过程，那么RunAction就是告诉快递员有堆快递需要在什么时候开始送，什么时候完全送达；EventAction就是需要送的快递，Hit就是送一份快递，给快递员分配的货箱大小；SensitiveDetector就是告诉快递员将货物放到货箱里；]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>geant4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next theme Setting]]></title>
    <url>%2F2018%2F09%2F14%2FHexo-Next-theme-Setting%2F</url>
    <content type="text"><![CDATA[referrence site1referrence site2 文章版权声明、文章加密访问、字数、时长、访问量 another sitereferrence site3 侧边栏社交小图标设置、设置网站图标、评论功能插件配置referrence site3 添加评论功能another siteSomebody’s blog Note 站外分享 another sitereferrence sit4 修改主题配色 对于文章版权声明功能，可以直接去next主题下的_config.yml中开启，个人认为抱着开源开放特性，这个功能并不是很重要； 设置版权信息1.在next主题下的next/_config.yml中设置copyright;12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: #https://creativecommons.org/licenses/by-nc-sa/3.0/ 在hexo站点配置文件_config.yml中设置url;123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://lihui-snippets.cn/ #https://github.com/Hubery-Leeroot: /permalink: :year/:month/:day/:title/permalink_defaults: http://lihui-snippets.cn 文章加密访问该加密方法密码暴露在网页调试代码中1.配置加密功能，打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 在scaffolds文件夹post.md文件中，加入password:,新建博客将有如下的形式文件头；12345678---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:description:password: --- 2.设置给文章设置访问密码，经过以上的配置，hexo new &quot;newblog&quot;在password: #密码设置密码；也可以在以往的文章设置加密访问，只需在文章头中加入password: #密码即可；12345678---title: The use of gnome-screenshot commanddate: 2018-09-11 16:12:50tags: [linux tool]categories: linux tooldescription: gnome-screenshot commandpassword: pass--- 如，要访问这篇The use of gnome-screenshot command文章就需要输入密码pass; 该加密方法加密效果更好以上方法给文章加密，可以通过浏览器调试界面看到网页密码，故而考虑另外的文章加密方式，可以参考留言版中的hexo-blog-encrypt地址尝试另一种加密方式；注意，对next主题，安装hexo-blog-encrypt2.0.*;对加密文章的头文件写法如下：123456789---title: The use of gnome-screenshot commanddate: 2018-09-11 16:12:50tags: [linux tool]categories: linux toolabstract: gnome-screenshot command;encrypt this articlepassword: passmessage: Please input password to read--- 其中，abstract后面写的是摘要，即是非加密文章头的description功能一样；message是加密文章所特有，指的是设置提示输入密码；password后面是设置的密码；Bug在打开文章页面后，不再显示摘要，解决办法是再加一遍description,故而，完全正确的加密文章抬头应该这么写：12345678910---title: The use of gnome-screenshot commanddate: 2018-09-11 16:12:50tags: [linux tool]categories: linux toolabstract: gnome-screenshot command;encrypt this articlepassword: passmessage: Please input password to readdescription: gnome-screenshot command;encrypt this article--- 经过测试，直接用description替代abstract也能达到这样的效果,并不存在Bug；123456789---title: The use of gnome-screenshot commanddate: 2018-09-11 16:12:50tags: [linux tool]categories: linux tooldescription: gnome-screenshot command;encrypt this articlepassword: passmessage: Please input password to read--- Bug: 第二种加密方式，没法自动生成文章目录栏； 访问量设置采用busuanzi 和leancloud设置，在themes的文件夹下_config.yml中打开busuanzi配置，如下1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: false page_pv_header: &lt;i class="fa fa-file-eye"&gt;&lt;/i&gt; page_pv_footer: 其中，site_uv指的是user visitors,site_pv指的是passager visitors; &lt;i class=&quot;fa fa-file-eye&quot;&gt;&lt;/i&gt;设置的是显示图标 对于文章的阅读量也可采用leancloud的应用来设置，如下：1234567891011121314151617181920212223242526# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt;``` 相对于busuanzi统计计数方法，leancloud方法能通过leancloud账户管理，并且leancloud统计的阅读量能够在首页显示；busuanzi统计数据无法在首页显示；leancloud应用的配置可以参考这篇文章 [参考文章链接](https://www.meiwen.com.cn/subject/yssswftx.html)## 评论功能设置评论功能采用leancloud valine应用，国内其他的友言、畅言和以及来必力都不能匿名评论，国外的gitalk,gitment以github用户授权评论，Hypercomments，Disqus等都被国内墙的厉害；只有国内leancloud应用具有匿名评论功能；在next主题下的`_config.yml`配置如下:``` bash# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: ooozwlclX00aJabPvk1WTj7J-gzGzoHsz # your leancloud application appid appkey: CnXrRUVdUdMXgEvGbdolWGYX # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 站外分享功能具体的配置，可以参考文章开头列出的参考链接；在此，我只是用next主题模版，不作具体深入配置，工作中心放在作笔记上；在_config.yml中，打开百度分享选项即可：123456# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.baidushare: type: slide 侧边栏社交小图标设置next主题的网站小图标采用FrontAwesome插件frontawesome icon site;在实际应用中，在frontawesome网站搜索图标，在next主题的配置文件中用名字直接应用就行了，举例如下；123456789101112131415161718192021# Social Links.# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: GitHub: https://github.com/Hubery-Lee || github Runoob: https://www.runoob.com || cube #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: enable: true icons_only: false transition: false 以上脚本中的github,cube即是在frontawesome上搜索到的图标名称；同样，links的图标也是这么配置的123456789# Blog rollslinks_icon: globelinks_title: Index#links_layout: blocklinks_layout: inlinelinks: Geant4: http://geant4.web.cern.ch/ Root: https://root.cern.ch/ 其中，globe即是frontawesome搜索到的图标名称； 设置网站图标若要对网站图标进行修改，只需将你要改的图标拷贝到themes/next/source/images/文件夹下，并修改themes/next/_config.yml文件中的，favicon后面对应的图片文件名即可；123456789# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 主题配色修改修改themes/next/source/css/_variables/base.styl文件；具体配色，暂时没有调整；另外next/_config.yml中有5种可直接用的配色方案，如下：12345# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night eighties 头部顶栏背景颜色或图片设置1.在themes/next/source/css/_schemes/Mist/_header.styl中以下代码中修改颜色（我采用Next-Mist主题）1.header &#123; background: $blue-bright; &#125; 2.也可改为背景图片，背景图片的添加如下：1.header &#123; background: url('../image/background.jpg'); &#125; 将你要作为背景的图片background.jpg放到Hexo/source/images/文件夹下；当然你也可以采用图片网址链接，如：1.header &#123; background: url('http://xx.xx.xx.com/hexo/image/header-backgroud.jpg'); &#125; 页脚设置在next/_config.yml中，修改footer:下面的配置，如下：1234567891011121314151617181920212223footer: ##这一段为页脚设置，footer英文意思即为页脚意思 # Specify the date when the site was setup. # If not defined, current year will be used. #since: 2015 # Icon between year and copyright info. icon: user # If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false # ------------------------------------------------------------- # Any custom text can be defined here. #custom_text: Hosted by &lt;a target="_blank" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[icon download site]]></title>
    <url>%2F2018%2F09%2F14%2Ficon-download-site%2F</url>
    <content type="text"><![CDATA[icon download siteicon download site]]></content>
      <categories>
        <category>素材</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Geant4 and Root Class Index]]></title>
    <url>%2F2018%2F09%2F14%2FGeant4-and-Root-Class-Index%2F</url>
    <content type="text"><![CDATA[Geant4 Class IndexGeant4 Class Index Root Class IndexRoot Class Index]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>geant4</tag>
        <tag>root</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Remote Repository UserGuide]]></title>
    <url>%2F2018%2F09%2F13%2FGit-Remote-Repository-UserGuide%2F</url>
    <content type="text"><![CDATA[git remote repository Usingreference site 查看远程仓库123$ git remote #显示仓库信息$ git remote --version #显示对应的克隆地址$ git remote -v #显示对应的克隆地址 添加远程仓库1$ git remote add pb git://github.com/paulboone/ticgit.git #git remote add [shortname] [url] 远程仓库抓取数据1$ git fetch pb # git fetch [remote-name] 推送数据到远程仓库1$ git push origin master #git push [remote-name] [branch-name] 查看远程仓库信息1$ git remote show origin #git remote show [remote-name]]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The use of gnome-screenshot command]]></title>
    <url>%2F2018%2F09%2F11%2FThe-use-of-gnomescreenshot-command%2F</url>
    <content type="text"><![CDATA[Please input password to read Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>linux tool</category>
      </categories>
      <tags>
        <tag>linux tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[geant4DetectorConstruction]]></title>
    <url>%2F2018%2F09%2F11%2Fgeant4DetectorConstruction%2F</url>
    <content type="text"><![CDATA[geant detector construction 几何旋转符合左手法则及RotationMatrix的使用经过验证geant4中的rotate符合左手法则 1234G4RotationMatrix *rot=new G4RotationMatrix;rot-&gt;rotateX(90*degree);rot-&gt;rotateY(90*degree);rot-&gt;rotateZ(90*degree); 注意，再次对rot重复赋值无效，如对上述代码再作如下操作rot-&gt;rotateX(180*degree),该操作将无效，不会改变之前的rot；那么，要对rot再次赋值该怎么办呢？如下：只需在再次赋值前加rot =new G4RotationMatrix即可；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 G4RotationMatrix* rotationMatrix_X = new G4RotationMatrix; for(G4int x_col_num = 0; x_col_num &lt;=NBD_colNb; x_col_num++)&#123; if(x_col_num==0)&#123; // the center colume NBDx = NBDx0; for(G4int y_row_num = 0; y_row_num &lt;=NBD_rowNb; y_row_num++ )&#123; // NBDx = NBDx0; NBDy = NBDy0+R*sin(y_row_num*theta); NBDz = NBDz0+R*(1-cos(y_row_num*theta)); if(y_row_num==0)&#123; // center position rotationMatrix_X = new G4RotationMatrix; rotationMatrix_X-&gt;rotateX(y_row_num*theta); new G4PVPlacement(rotationMatrix_X, //no rotation G4ThreeVector(NBDx,NBDy,NBDz), //at (0,0,0) logicAssembleNBD, //its logical volume "AssembleNBD", //its name expHall_logV, //its mother volume false, //no boolean operation 0, //copy number true); //overlaps checking &#125; else&#123; //+y++ rotationMatrix_X = new G4RotationMatrix; rotationMatrix_X-&gt;rotateX(-y_row_num*theta); new G4PVPlacement(rotationMatrix_X, //no rotation G4ThreeVector(NBDx,NBDy,NBDz), //at (0,0,0) logicAssembleNBD, //its logical volume "AssembleNBD", //its name expHall_logV, //its mother volume false, //no boolean operation 0, //copy number true); // overlaps checking //-y++ rotationMatrix_X = new G4RotationMatrix; rotationMatrix_X-&gt;rotateX(y_row_num*theta); new G4PVPlacement(rotationMatrix_X, //no rotation G4ThreeVector(NBDx,-NBDy,NBDz), //at (0,0,0) logicAssembleNBD, //its logical volume "AssembleNBD", //its name expHall_logV, //its mother volume false, //no boolean operation 0, //copy number true); // overlaps checking &#125; &#125;... G4VParameterisation()的使用 ComputeTransformation defines where one of the copies is placed ComputeDimensions defines the size of one copy, and a constructor that initializes any member variables that are required. G4VParameterisation的具体应用可参看Basics/B2/B2b]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>geant4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[G4Color选项]]></title>
    <url>%2F2018%2F09%2F09%2FG4Color%E9%80%89%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[颜色的配置Geant4中的颜色配置由红、绿、蓝、是否透明四个构成；red、green、blue、alpha(opacity/opaque)12345G4Colour::G4Colour ( G4double r = 1.0, G4double g = 1.0, G4double b = 1.0, G4double a = 1.0); //0&lt;=red, green, blue &lt;= 1.0 颜色的实例化应用1.颜色配置实例化12345678910G4Colour white (); //whiteG4Colour white (1.0,1.0,1.0); //whiteG4Colour gray (0.5,0.5,0.5); //grayG4Colour black (0.0,0.0,0.0); //blackG4Colour red (1.0,0.0,0.0); //redG4Colour green (0.0,1.0,0.0); //greenG4Colour blue (0.0,0.0,1.0); //blueG4Colour cyan (0.0,1.0,1.0); //cyanG4Colour magenta(1.0,0.0,1.0); //magentaG4Colour yellow (1.0,1.0,0.0); //yellow example1G4VisAttributes* Assemble_VisAtt= new G4VisAttributes(G4Colour(0.0,0.0,1.0));//blue 2.静态公用数据函数实例化12345678910static const G4Colour&amp; White ();static const G4Colour&amp; Gray ();static const G4Colour&amp; Grey ();static const G4Colour&amp; Black ();static const G4Colour&amp; Red ();static const G4Colour&amp; Green ();static const G4Colour&amp; Blue ();static const G4Colour&amp; Cyan ();static const G4Colour&amp; Magenta ();static const G4Colour&amp; Yellow (); example1G4Colour myRed(G4Colour::Red()); 实例化Colour对象后，可以采用如下方式获得函数123G4double G4Colour::GetRed () const;G4double G4Colour::GetGreen () const;G4double G4Colour::GetBlue () const; Colour Map的应用123456789101112G4String G4Colour---------------------------------------white G4Colour::White ()gray G4Colour::Gray ()grey G4Colour::Grey ()black G4Colour::Black ()red G4Colour::Red ()green G4Colour::Green ()blue G4Colour::Blue ()cyan G4Colour::Cyan ()magenta G4Colour::Magenta ()yellow G4Colour::Yellow () Colours的检索可以采用如下方式1bool G4Colour::GetColour(const G4String&amp; key, G4Colour&amp; result) example1234567G4Colour myColour(G4Colour::Black());if (G4Colour::GetColour("red", myColour)) &#123;// Successfully retrieved colour "red". myColour is now red&#125;else &#123;// Colour did not exist in map. myColour is still black&#125;]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>Geant4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Add menubar and search function to hexo blog]]></title>
    <url>%2F2018%2F09%2F09%2FHow-to-add-menubar-and-search-function-to-blog-with-hexo%2F</url>
    <content type="text"><![CDATA[Add MenubarIn the theme folder, we can find the following scripts in the _config.yml file.12345678910111213141516171819202122# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.# Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true The default menubars are home and archives. I want to add tags, categories and about to menubar. The problems appear when I only note off the options in the above scripts. After investigation about this problem, I find the ansower in this site http://www.360doc.com/content/18/0521/13/14715637_755685918.shtml method one to cite website this site method two to cite website Actually, we should add folder with commond hexo new page menubar_name, then corresponding folders will appear in the source folder which is the site configure source folder. Then add configure information in the correspongding index.md.Take tags for example. 1$ hexo new page tags We will see follow information in index.md. 1234---title: tagsdate: 2018-09-09 13:34:49--- Then we add type: &quot;tags&quot; to the index.md12345---title: tagsdate: 2018-09-09 13:34:49type: "tags"--- Similar methods are used to add categories and about to menubar. Add local search function to menubar install hexo-generator-search, hexo-theme-next search function depend on this package. 1$ npm install hexo-generator-search --save active the local search configure in theme configure file _config.yml. 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true #false modified by hubery lee @2018/9/9 # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo中插入图片测试]]></title>
    <url>%2F2018%2F09%2F01%2F%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[hexo 站点配置设置_config.yml 1post_asset_folder: true 安装插件12$ npm install hexo-asset-image --save$ npm install https://github.com/CodeFalling/hexo-asset-image -- save #该方法安装测试成功 图片引用123$ hexo new "newblog" 会有newblog.md和newblog文件夹，将需要引用的图片放到文件夹内 在newblog.md中图片的引用 1.标签引用 123$ &#123;% asset_path slug %&#125;$ &#123;% asset_img slug [title] %&#125;$ &#123;% asset_link slug [title] %&#125; /2018/09/01/图片测试/gitProcess.png 第三种方法 12345&#123;% asset_path gitProcess.png %&#125;&#123;% asset_img gitProcess.png 第二种方法 %&#125;&#123;% asset_link https://image.baidu.com/search/detail?ct=503316480&amp;z=&amp;tn=baiduimagedetail&amp;ipn=d&amp;word=%E7%8C%AB%E5%A4%B4%E9%B9%B0&amp;step_word=&amp;ie=utf-8&amp;in=&amp;cl=2&amp;lm=-1&amp;st=-1&amp;cs=2028628767,61876418&amp;os=4058183028,3413382511&amp;pn=0&amp;rn=1&amp;di=196345561830&amp;ln=1940&amp;fr=&amp;fmq=1535807535286_R&amp;fm=&amp;ic=0&amp;s=undefined&amp;se=&amp;sme=&amp;tab=0&amp;width=&amp;height=&amp;face=undefined&amp;is=0,0&amp;istype=2&amp;ist=&amp;jit=&amp;bdtype=0&amp;pi=0&amp;gsm=0&amp;objurl=http%3A%2F%2Fimg5q.duitang.com%2Fuploads%2Fblog%2F201502%2F08%2F20150208122643_s2BMS.jpeg&amp;rpstart=0&amp;rpnum=0&amp;adpicid=0&amp;ctd=1535807540714^3_1354X569%1 owl %&#125;&#123;% asset_link gitProcess.png 第三种方法 %&#125; 2.利用markdown 1![图片说明](XXX/图片.jpg) #XXX为文件夹名 12![图片测试1](图片测试/gitProcess.png)![图片测试2](gitProcess.png)]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git简易使用笔记]]></title>
    <url>%2F2018%2F09%2F01%2FGitUseGuide%2F</url>
    <content type="text"><![CDATA[创建仓库采用git init 在目录创建新的仓库 123$ mkdir newrepository #$ cd newrepository$ git init 或者直接采用 git init 仓库名 1$ git init newrepository 软件仓库下载下载仓库 git clone 拷贝到本地1$ get clone [url] 例如，从我的github上下载代码到本地1$ get clone https://github.com/Hubery-Lee/LeeEmacs-setting 软件仓库的快照git的日常使用git 的日常使用过程 git add 命令可将文件添加到缓存()git status 查看添加到缓存的文件状态 -s 简短结果输出 1234567891011121314151617181920212223242526$ touch README$ touch hello.php$ lsREADME hello.php$ git status -s?? README?? hello.php$ git add README hello.php $ git status -sA READMEA hello.php$ 在 README 添加以下内容：# Runoob Git 测试，然后保存退出。$ echo "# Runoob Git"&gt;&gt;README $ git status -sAM READMEA hello.php$ git add .$ git status -sA READMEA hello.php 执行 git diff 来查看执行 git status 的结果的详细信息。 git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。 尚未缓存的改动：git diff 查看已缓存的改动： git diff --cached 查看已缓存的与未缓存的所有改动：git diff HEAD 显示摘要而非整个 diff：git diff --stat git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。 接下来我们来查看下 git diff –cached 的执行效果： 123456789101112131415161718192021222324252627282930313233343536373839在 hello.php 文件中输入以下内容：&lt;?phpecho '菜鸟教程：www.runoob.com';?&gt;$ git status -sA READMEAM hello.php$ git diffdiff --git a/hello.php b/hello.phpindex e69de29..69b5711 100644--- a/hello.php+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+echo '菜鸟教程：www.runoob.com';+?&gt;$ git add hello.php $ git status -sA READMEA hello.php$ git diff --cacheddiff --git a/README b/READMEnew file mode 100644index 0000000..8f87495--- /dev/null+++ b/README@@ -0,0 +1 @@+# Runoob Git 测试diff --git a/hello.php b/hello.phpnew file mode 100644index 0000000..69b5711--- /dev/null+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+echo '菜鸟教程：www.runoob.com';+?&gt; git commit 将缓存区内容添加到仓库中123 配置用户名和邮箱地址$ git config --global user.name 'runoob'$ git config --global user.email test@runoob.com 提交缓存到仓库123456789$ git commit -m '第一次版本提交'[master (root-commit) d32cf1f] 第一次版本提交 2 files changed, 4 insertions(+) create mode 100644 README create mode 100644 hello.php$ git status# On branch masternothing to commit (working directory clean) git reset HEAD 命令用于取消已缓存的内容。同时修改README和hello.php,然后撤销hello.php的缓存12345678910111213141516171819$ git status -s M README M hello.php$ git add .$ git status -sM READMEM hello.pp$ git reset HEAD hello.php Unstaged changes after reset:M hello.php$ git status -sM README M hello.php$ git commit -m '修改'[master f50cfda] 修改 1 file changed, 1 insertion(+)$ git status -s M hello.php 仍然可以再次提交hello.php修改的内容123456$ git commit -am '修改 hello.php 文件'[master 760f74d] 修改 hello.php 文件 1 file changed, 1 insertion(+)$ git statusOn branch masternothing to commit, working directory clean 简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。 git rm如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。 123456$ git rm &lt;file&gt;$ git rm -f &lt;file&gt;$ git rm -r &lt;file&gt;$ git rm --cached &lt;file&gt;类似有git mv 移动和重命名$ git mv README README.md 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作 git中tag和branch的使用 创建分支、列出分支、切换分支、删除分支123456789101112131415161718192021222324252627$ git branch testing #创建testing分支$ git branch #列出分支* master testing$ git checkout testingSwitched to branch 'testing'$ git checkout masterSwitched to branch 'master'$ git checkout -b newtest #创建newtest分支并切换到该分支Switched to a new branch 'newtest'$ git branch -d testing #删除testing分支Deleted branch testing (was 85fc7e7).$ git branch * master newtest$ git merge newtest #将newtest分支合并到master分支Updating 2e082b7..556f0a0Fast-forward test2.txt | 1 - 1 file changed, 1 deletion(-) delete mode 100644 test2.txt 当同时记录到master的修改和branch分支的修改时，会出现合并分支冲突手动修改冲突部分采用git add 告诉git文件冲突已经解决；123456789101112131415161718192021222324252627282930313233$ git merge change_siteAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ cat test.txt &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADrunoob.com新增加一行=======www.runoob.com&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site$ vim test.txt $ cat test.txt www.runoob.com新增加一行$ git diffdiff --cc test.txtindex f84c2a4,bccb7c2..0000000--- a/test.txt+++ b/test.txt@@@ -1,2 -1,1 +1,2 @@@- runoob.com+ www.runoob.com +新增加一行$ git status -sUU test.txt$ git add test.txt $ git status -sM test.txt$ git commit[master 88afe0e] Merge branch 'change_site' 查看提交历史123456$ git log #详细提交历史$ git log --oneline #简洁提交历史$ git log --oneline --graph #--graph开启了拓扑图选项$ git log --reverse --oneline #用 '--reverse'参数来逆向显示所有日志。$ git log --author=Linus --oneline -5 #--author查找指定用户提交的记录$ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges#指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after --no-merges 选项以隐藏合并提交 标签写一句标签注解，就像你给提交写注解一样。1234567891011121314151617181920$ git tag -a v1.0 $ git log --oneline --decorate --graph #执行 git log --decorate 时，可以看到标签$ git tag -a v0.9 85fc7e7 #给提交代码85fc7e7追加标签$ git log --oneline --decorate --graph* 88afe0e (HEAD, tag: v1.0, master) Merge branch 'change_site'|\ | * d7e7346 (change_site) changed the site* | 14b4dca 新增加一行|/ * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 (tag: v0.9) test comment from runoob.com$ git tag #查看所有标签v0.9v1.0$ git tag -a &lt;tagname&gt; -m "runoob.com标签" #指定标签信息命令$ git tag -s &lt;tagname&gt; -m "runoob.com标签" #PGP签名标签命令 远程软件仓库的提取1234567891011121314$ git remote #查看远程仓库origin$ git remote -v #-v 参数，可以看到每个别名的实际链接地址。origin git@github.com:tianqixin/runoob-git-test.git (fetch)origin git@github.com:tianqixin/runoob-git-test.git (push)$ git fetch [alias] #从远程仓库下载分支和数据$ git fetch origin #从远程仓库下载origin分支和数据remote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Unpacking objects: 100% (3/3), done.From github.com:tianqixin/runoob-git-test 0205aab..febd8ed master -&gt; origin/master 远程软件仓库的上传123456789101112$ git merge [alias]/[branch] #以将服务器上的任何更新合并到你的当前分支$ git merge origin/master #从远端仓库提取数据并尝试合并到当前分支Updating 0205aab..febd8edFast-forward README.md | 1 + 1 file changed, 1 insertion(+)$ git push [alias] [branch] #推送你的新分支与数据到某个远端仓库$ git push origin master # 推送到 Githubgit remote rm [alias]git remote mv [aliasA] [aliasB] 获取软件仓库更改历史123456789101112131415$ git status$ git status -s$ git diff $ git diff --cached$ git log #详细提交历史$ git log --oneline #简洁提交历史$ git log --oneline --graph #--graph开启了拓扑图选项$ git log --reverse --oneline #用 '--reverse'参数来逆向显示所有日志。$ git log --author=Linus --oneline -5 #--author查找指定用户提交的记录$ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges#指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after --no-merges 选项以隐藏合并提交$ git branch$ git tag$ git remote 回滚到软件仓库的历史版本1234$ git reset $ git reset HEAD [file]$ git reset --hard &lt;target_commit_id&gt;$ git reset --soft origin/source 命令（source 分支）]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo简易使用笔记]]></title>
    <url>%2F2018%2F09%2F01%2Fhexo%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[常用命令1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令12hexo s -g #生成并本地预览hexo d -g #生成并上传 hexo发布博客预览本地预览 1hexo s -g #生成并本地预览 然后，在浏览器中打开 http://localhost:4000/ 发布到github绑定的个人博客网页上 1hexo d -g #生成并上传 比如，我发布博客后，就直接可以采用个人网络域名访问 http://lihui-snippets.cn/ 具体github+hexo如何搭建个人博客教程可以百度以下；我觉得这篇博客写的比较好 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeeEmacs-setting]]></title>
    <url>%2F2018%2F09%2F01%2FLeeEmacs-setting%2F</url>
    <content type="text"><![CDATA[模块功能yasnippet 下载yasnippet安葬包，加压到~/.emacs.d/plugins目录下 在～/.emacs文件中配置yasnippet 1234567891011121314151617181920;; add yasnippet plugin (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")(require 'yasnippet)(yas-global-mode 1);;代码折叠(load-library "hideshow")(add-hook 'java-mode-hook 'hs-minor-mode)(add-hook 'perl-mode-hook 'hs-minor-mode)(add-hook 'php-mode-hook 'hs-minor-mode)(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)(add-hook 'c++-mode-hook 'hs-minor-mode)(add-hook 'c-mode-hook 'hs-minor-mode)(add-hook 'matlab-mode-hook 'hs-minor-mode)(add-hook 'fortran-mode-hook 'hs-minor-mode)(add-hook 'f90-mode-hook 'hs-minor-mode)(add-hook 'markdown-mode-hook 'hs-minor-mode)(add-hook 'org-mode-hook 'hs-minor-mode) 文件头个人信息设置——header2.el wiki 下载header2.el 将header2.el 放到~/.emacs.d/plugins文件夹下； 在～/.emacs文件中配置个人信息 12345678910111213141516171819202122;;====================info of user====================;;********************header**************************;;(load-file "~/.emacs.d/header2.el")(add-to-list 'load-path "~/.emacs.d/plugins" );; 设置文件头中的姓名(require 'header2)(setq user-full-name "Li Hui");; 设置邮箱(setq user-email-address "h*****@126.com") ;; 设置每次保存时要更新的项目(autoload 'auto-update-file-header "header2")(add-hook 'write-file-hooks 'auto-update-file-header)(autoload 'auto-make-header "header2")(add-hook 'emacs-lisp-mode-hook 'auto-make-header)(add-hook 'c-mode-common-hook 'auto-make-header) (add-hook 'c++-mode-common-hook 'auto-make-header)(add-hook 'text-mode-hook 'auto-make-header);;(add-hook 'make-header-hook 'header-shell nil t) 自动补全 auto-complete经过尝试，直接解压到~/.emacs.d/plugins文件夹然后make 和make install 然后在.emacs文件配置导入auto-complete插件，但并不能实现自动补全功能。但也没有报错；我认为可能是由于可能式auto-complete没有开启的缘故； 检测auto-complete有没有安装成功的方法 1安装完后，重启emacs然后输入ac，若出现可选的自动补全选项，那么说明已经安装成功了； auto-complete的安装方法——第二种安装成功（1）传统方法是采用解压到~/.emacs.d/plugins,然后make和make install，再在.emacs中进行配置 1234(add-to-list 'load-path "/home/hubery_lee/.emacs.d/plugins/auto-complete")(require 'auto-complete-config)(add-to-list 'ac-dictionary-directories "/home/hubery_lee/.emacs.d/plugins/auto-complete/ac-dict")(ac-config-default) （2）通过MELPA或MELPA Stable的package.el安装auto-complete.el；参考github这个开放者介绍的方法进行安装 https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md 首先，添加melpa或melpa-stable的package库 12345678(require 'package);; If you want to use latest version(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"));; If you want to use last tagged version(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))(package-initialize) 然后,利用package功能安装auto-complete 123在emacs的minibuffer里选取以下一种命令安装auto-complete M-x package-list-packages and select auto-complete M-x package-refresh-contents and M-x package-install auto-complete 最后，根据显示的安装路径，在.emacs中进行配置 1234567;; add auto-complete plugin(add-to-list 'load-path "/home/hubery_lee/.emacs.d/elpa/auto-complete-20170125.245")(require 'auto-complete-config)(add-to-list 'ac-dictionary-directories "/home/hubery_lee/.emacs.d/elpa/auto-complete-20170125.245/ac-dict")(ac-config-default) 自定义小功能1234567891011121314151617181920212223242526272829303132333435363738394041;;显示匹配的括号(show-paren-mode t) ;;光标显示为一竖线(setq-default cursor-type 'bar);;setting frame title (setq frame-title-format "%b - LiHui@CIRP");;鼠标指针避光标(mouse-avoidance-mode 'animate);;不生成临时文件(setq-default make-backup-files nil);;允许emacs和外部其他程序的粘贴(setq x-select-enable-clipboard t);;使用鼠标中键可以粘贴(setq mouse-yank-at-point t);; 自动的在文件末增加一新行;;(setq require-final-newline t);; 当光标在行尾上下移动的时候，始终保持在行尾。;;color;;(add-to-list 'load-path "~/.emacs.d/plugins");;(require 'color-theme);;(color-theme-subtle-hacker);;(color-theme-xemacs);;(color-theme-wheat);;(color-theme-calm-forest);;(color-theme-matrix);;(color-theme-robin-hood);;(color-theme-euphoria);;(color-theme-arjen);;(color-theme-jsc-dark);;hide tool bar(tool-bar-mode 0);; show line number(global-linum-mode 'linum-mode)]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>Emacs24.3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git-VS-SVN]]></title>
    <url>%2F2018%2F08%2F20%2FGit-VS-SVN%2F</url>
    <content type="text"><![CDATA[Git和SVN主要差别SVN只有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。Git每一个终端都是一个仓库，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。每一次的提取操作，实际上都是一次对代码仓库的完整备份。Git不仅仅是个版本控制系统，它也是个内容管理系统（CMS），工作管理系统等。 1.分布式VS集中式版本控制svn采用集中式版本控制 git采用分布式版本控制 两种版本控制的区别：（1）svn 过渡依赖中央服务器，出现故障影响其他工作;git中央服务器只用于方便交流，有没有中央服务器都行；（2）svn 版本库只保存在中央服务器，本地检测时不会检出版本库；git每个本地电脑均会保存完整的版本库；（3）svn 的commit依赖连接中央服务器的网络；git由于有本地版本库，可以commit不依赖网络，commit可以频繁使用；git 通过push来实现其他电脑的版本库的同步（synchronize）操作； 2.分支功能（1）svn 创建分支就是创建了一个新文件夹并拥有实际的文件，类似于拷贝了一份源文件，相当于在服务器上创建了分支，会影响到连接服务器的所有本地工作副本；git创建分支并没有创建文件夹，创建分支只是多了一个索引文件，并记录这个分支的变化，占用空间小，分支之间可以自由切换互不影响。（2）git具有代码审核功能，各个成员请求将自己的分子合并到主分支均需要管理人员进行审核。git的工作流程如下： 3.git的使用（1）安装配置（2）pc上任意获取，运行git clone url，将远程版本库克隆到本地（3）日常场景 a.创建一个新文件，并添加到版本库中使用命令：创建了一个新文件，需要添加到版本库里（追踪此文件）使用git add filename命令，我想保存一下，使用git commit -m ….. 我想把我改变的推送给其他人（服务器）git push -u origin master(提交代码)。12$ mkdir newDoc$ git add newDoc b.保存一下修改记录1$ git commit -m "提交添加一个新文件到版本库" #“”内为chang messages c.将我的修改推送给其他人或服务器1$ git push -u origin master 我想把别人改变的代码拉去过来其实有两种方法git fetch与git pull。它们都是将从服务器上拉取最新的代码。那么它们什么区别呢？Git fetch 是仅仅将代码拉取下来，而git pull 不仅将服务器上的代码拉去下来，而且进行了合并merge。总结一下就是git pull 包含了 git fetch + merge。 d.将别人的代码拉取过来1$ git pull 我想把别人改变的代码拉去过来其实有两种方法git fetch与git pull。它们都是将从服务器上拉取最新的代码。那么它们什么区别呢？Git fetch 是仅仅将代码拉取下来，而git pull 不仅将服务器上的代码拉去下来，而且进行了合并merge。总结一下就是git pull 包含了 git fetch + git merge。 e.删除原来的文件1$ git rm file #将会将file文件从暂存区与磁盘删除 原来的有个文件，想删除了，使用git rm file(停止追踪文件并从磁盘上删除),如果我们只想将 停止追踪文件，但是不删除只需要 git rm –cached 。然后想把这个改变推送给别人，就应该是用git commit 然后git push 将自己的改变推送到git服务器。 f.git分支功能的使用那么平时我们收到一个新功能的任务，应该是怎样的操作呢？比较正确的操作流程应该是这样，我们先使用git branch 查看一下我们本地到底有多少分支，然后我们先使用git branch 从develop分支新建一个分支featureN,然后使用git checkout &lt;branch/tag&gt; 切换到新建的featureN分支里。在新的分支里进行新功能开发。123$ git branch #查看分支$ git branch #新建分支featureN 即 &lt;new branch&gt;$ git checkout &lt;branch/tag&gt; #切换到新建的featureN分支里，在新的分支里进行新功能的开发。 g.恢复到某一时刻我们在进行新功能开发的时候，每实现一个小功能的时候，我们就git commit 进行提交一下，刚提交完，突然发现，这次提交的东西会严重影响其他功能，想撤销这次提交，我们需要使用git reset –hart HEAD 来撤销工作目录中所有未提交文件的修改内容。那么如果我们想撤销指定的一次提交呢？我们需要使用git revert 进行指定的提交。12$ git reset HEAD #撤回暂存中未提交的内容$ git revert &lt;commit&gt; #撤回一次指到定的提交 h.分支的合并假设开发完毕后，应该怎么做？对，就是将新功能的分支合并到develop分支里。就是先切换到develop分支里，然后使用git merge 命令进行合并。这时，新功能开发完毕，新建的featureN分支就没用了，我们使用git branch -d 将无用的分支删除。至此，我们新功能开发完毕。12$ git merge $ git branch -d &lt;branch&gt; i.查看工作日志1$ git log Git log 作用很大，功能也很多]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
</search>
