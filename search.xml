<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo Next theme Setting]]></title>
    <url>%2F2018%2F09%2F14%2FHexo-Next-theme-Setting%2F</url>
    <content type="text"><![CDATA[referrence site1referrence site2 文章版权声明、文章加密访问、字数、时长、访问量 another sitereferrence site3 侧边栏社交小图标设置、设置网站图标、评论功能插件配置referrence site3 添加评论功能another siteSomebody’s blog Note 站外分享 another sitereferrence sit4 修改主题配色 对于文章版权声明功能，可以直接去next主题下的_config.yml中开启，个人认为抱着开源开放特性，这个功能并不是很重要； 设置版权信息1.在next主题下的next/_config.yml中设置copyright;12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: #https://creativecommons.org/licenses/by-nc-sa/3.0/ 在hexo站点配置文件_config.yml中设置url;123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://lihui-snippets.cn/ #https://github.com/Hubery-Leeroot: /permalink: :year/:month/:day/:title/permalink_defaults: http://lihui-snippets.cn 文章加密访问该加密方法密码暴露在网页调试代码中1.配置加密功能，打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 在scaffolds文件夹post.md文件中，加入password:,新建博客将有如下的形式文件头；12345678---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:description:password: --- 2.设置给文章设置访问密码，经过以上的配置，hexo new &quot;newblog&quot;在password: #密码设置密码；也可以在以往的文章设置加密访问，只需在文章头中加入password: #密码即可；12345678---title: The use of gnome-screenshot commanddate: 2018-09-11 16:12:50tags: [linux tool]categories: linux tooldescription: gnome-screenshot commandpassword: pass--- 如，要访问这篇The use of gnome-screenshot command文章就需要输入密码pass; 该加密方法加密效果更好以上方法给文章加密，可以通过浏览器调试界面看到网页密码，故而考虑另外的文章加密方式，可以参考留言版中的hexo-blog-encrypt地址尝试另一种加密方式；注意，对next主题，安装hexo-blog-encrypt2.0.*;对加密文章的头文件写法如下：123456789---title: The use of gnome-screenshot commanddate: 2018-09-11 16:12:50tags: [linux tool]categories: linux toolabstract: gnome-screenshot command;encrypt this articlepassword: passmessage: Please input password to read--- 其中，abstract后面写的是摘要，即是非加密文章头的description功能一样；message是加密文章所特有，指的是设置提示输入密码；password后面是设置的密码； 访问量设置采用busuanzi 和leancloud设置，在themes的文件夹下_config.yml中打开busuanzi配置，如下1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: false page_pv_header: &lt;i class="fa fa-file-eye"&gt;&lt;/i&gt; page_pv_footer: 其中，site_uv指的是user visitors,site_pv指的是passager visitors; &lt;i class=&quot;fa fa-file-eye&quot;&gt;&lt;/i&gt;设置的是显示图标 对于文章的阅读量也可采用leancloud的应用来设置，如下：1234567891011121314151617181920212223242526# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt;``` 相对于busuanzi统计计数方法，leancloud方法能通过leancloud账户管理，并且leancloud统计的阅读量能够在首页显示；busuanzi统计数据无法在首页显示；leancloud应用的配置可以参考这篇文章 [参考文章链接](https://www.meiwen.com.cn/subject/yssswftx.html)## 评论功能设置评论功能采用leancloud valine应用，国内其他的友言、畅言和以及来必力都不能匿名评论，国外的gitalk,gitment以github用户授权评论，Hypercomments，Disqus等都被国内墙的厉害；只有国内leancloud应用具有匿名评论功能；在next主题下的`_config.yml`配置如下:``` bash# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: ooozwlclX00aJabPvk1WTj7J-gzGzoHsz # your leancloud application appid appkey: CnXrRUVdUdMXgEvGbdolWGYX # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 站外分享功能具体的配置，可以参考文章开头列出的参考链接；在此，我只是用next主题模版，不作具体深入配置，工作中心放在作笔记上；在_config.yml中，打开百度分享选项即可：123456# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.baidushare: type: slide 侧边栏社交小图标设置next主题的网站小图标采用FrontAwesome插件frontawesome icon site;在实际应用中，在frontawesome网站搜索图标，在next主题的配置文件中用名字直接应用就行了，举例如下；123456789101112131415161718192021# Social Links.# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: GitHub: https://github.com/Hubery-Lee || github Runoob: https://www.runoob.com || cube #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: enable: true icons_only: false transition: false 以上脚本中的github,cube即是在frontawesome上搜索到的图标名称；同样，links的图标也是这么配置的123456789# Blog rollslinks_icon: globelinks_title: Index#links_layout: blocklinks_layout: inlinelinks: Geant4: http://geant4.web.cern.ch/ Root: https://root.cern.ch/ 其中，globe即是frontawesome搜索到的图标名称； 设置网站图标若要对网站图标进行修改，只需将你要改的图标拷贝到themes/next/source/images/文件夹下，并修改themes/next/_config.yml文件中的，favicon后面对应的图片文件名即可；123456789# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 主题配色修改修改themes/next/source/css/_variables/base.styl文件；具体配色，暂时没有调整；另外next/_config.yml中有5种可直接用的配色方案，如下：12345# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night eighties 头部顶栏背景颜色或图片设置1.在themes/next/source/css/_schemes/Mist/_header.styl中以下代码中修改颜色（我采用Next-Mist主题）1.header &#123; background: $blue-bright; &#125; 2.也可改为背景图片，背景图片的添加如下：1.header &#123; background: url('../image/background.jpg'); &#125; 将你要作为背景的图片background.jpg放到Hexo/source/images/文件夹下；当然你也可以采用图片网址链接，如：1.header &#123; background: url('http://xx.xx.xx.com/hexo/image/header-backgroud.jpg'); &#125; 页脚设置在next/_config.yml中，修改footer:下面的配置，如下：1234567891011121314151617181920212223footer: ##这一段为页脚设置，footer英文意思即为页脚意思 # Specify the date when the site was setup. # If not defined, current year will be used. #since: 2015 # Icon between year and copyright info. icon: user # If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false # ------------------------------------------------------------- # Any custom text can be defined here. #custom_text: Hosted by &lt;a target="_blank" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[icon download site]]></title>
    <url>%2F2018%2F09%2F14%2Ficon-download-site%2F</url>
    <content type="text"><![CDATA[icon download siteicon download site]]></content>
      <categories>
        <category>素材</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Geant4 and Root Class Index]]></title>
    <url>%2F2018%2F09%2F14%2FGeant4-and-Root-Class-Index%2F</url>
    <content type="text"><![CDATA[Geant4 Class IndexGeant4 Class Index Root Class IndexRoot Class Index]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>geant4</tag>
        <tag>root</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Remote Repository UserGuide]]></title>
    <url>%2F2018%2F09%2F13%2FGit-Remote-Repository-UserGuide%2F</url>
    <content type="text"><![CDATA[git remote repository Usingreference site 查看远程仓库123$ git remote #显示仓库信息$ git remote --version #显示对应的克隆地址$ git remote -v #显示对应的克隆地址 添加远程仓库1$ git remote add pb git://github.com/paulboone/ticgit.git #git remote add [shortname] [url] 远程仓库抓取数据1$ git fetch pb # git fetch [remote-name] 推送数据到远程仓库1$ git push origin master #git push [remote-name] [branch-name] 查看远程仓库信息1$ git remote show origin #git remote show [remote-name]]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The use of gnome-screenshot command]]></title>
    <url>%2F2018%2F09%2F11%2FThe-use-of-gnomescreenshot-command%2F</url>
    <content type="text"><![CDATA[Please input password to read Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>linux tool</category>
      </categories>
      <tags>
        <tag>linux tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[geant4DetectorConstruction]]></title>
    <url>%2F2018%2F09%2F11%2Fgeant4DetectorConstruction%2F</url>
    <content type="text"><![CDATA[geant detector construction 几何旋转符合左手法则及RotationMatrix的使用经过验证geant4中的rotate符合左手法则 1234G4RotationMatrix *rot=new G4RotationMatrix;rot-&gt;rotateX(90*degree);rot-&gt;rotateY(90*degree);rot-&gt;rotateZ(90*degree); 注意，再次对rot重复赋值无效，如对上述代码再作如下操作rot-&gt;rotateX(180*degree),该操作将无效，不会改变之前的rot；那么，要对rot再次赋值该怎么办呢？如下：只需在再次赋值前加rot =new G4RotationMatrix即可；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 G4RotationMatrix* rotationMatrix_X = new G4RotationMatrix; for(G4int x_col_num = 0; x_col_num &lt;=NBD_colNb; x_col_num++)&#123; if(x_col_num==0)&#123; // the center colume NBDx = NBDx0; for(G4int y_row_num = 0; y_row_num &lt;=NBD_rowNb; y_row_num++ )&#123; // NBDx = NBDx0; NBDy = NBDy0+R*sin(y_row_num*theta); NBDz = NBDz0+R*(1-cos(y_row_num*theta)); if(y_row_num==0)&#123; // center position rotationMatrix_X = new G4RotationMatrix; rotationMatrix_X-&gt;rotateX(y_row_num*theta); new G4PVPlacement(rotationMatrix_X, //no rotation G4ThreeVector(NBDx,NBDy,NBDz), //at (0,0,0) logicAssembleNBD, //its logical volume "AssembleNBD", //its name expHall_logV, //its mother volume false, //no boolean operation 0, //copy number true); //overlaps checking &#125; else&#123; //+y++ rotationMatrix_X = new G4RotationMatrix; rotationMatrix_X-&gt;rotateX(-y_row_num*theta); new G4PVPlacement(rotationMatrix_X, //no rotation G4ThreeVector(NBDx,NBDy,NBDz), //at (0,0,0) logicAssembleNBD, //its logical volume "AssembleNBD", //its name expHall_logV, //its mother volume false, //no boolean operation 0, //copy number true); // overlaps checking //-y++ rotationMatrix_X = new G4RotationMatrix; rotationMatrix_X-&gt;rotateX(y_row_num*theta); new G4PVPlacement(rotationMatrix_X, //no rotation G4ThreeVector(NBDx,-NBDy,NBDz), //at (0,0,0) logicAssembleNBD, //its logical volume "AssembleNBD", //its name expHall_logV, //its mother volume false, //no boolean operation 0, //copy number true); // overlaps checking &#125; &#125;... G4VParameterisation()的使用 ComputeTransformation defines where one of the copies is placed ComputeDimensions defines the size of one copy, and a constructor that initializes any member variables that are required. G4VParameterisation的具体应用可参看Basics/B2/B2b]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>geant4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[G4Color选项]]></title>
    <url>%2F2018%2F09%2F09%2FG4Color%E9%80%89%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[颜色的配置Geant4中的颜色配置由红、绿、蓝、是否透明四个构成；red、green、blue、alpha(opacity/opaque)12345G4Colour::G4Colour ( G4double r = 1.0, G4double g = 1.0, G4double b = 1.0, G4double a = 1.0); //0&lt;=red, green, blue &lt;= 1.0 颜色的实例化应用1.颜色配置实例化12345678910G4Colour white (); //whiteG4Colour white (1.0,1.0,1.0); //whiteG4Colour gray (0.5,0.5,0.5); //grayG4Colour black (0.0,0.0,0.0); //blackG4Colour red (1.0,0.0,0.0); //redG4Colour green (0.0,1.0,0.0); //greenG4Colour blue (0.0,0.0,1.0); //blueG4Colour cyan (0.0,1.0,1.0); //cyanG4Colour magenta(1.0,0.0,1.0); //magentaG4Colour yellow (1.0,1.0,0.0); //yellow example1G4VisAttributes* Assemble_VisAtt= new G4VisAttributes(G4Colour(0.0,0.0,1.0));//blue 2.静态公用数据函数实例化12345678910static const G4Colour&amp; White ();static const G4Colour&amp; Gray ();static const G4Colour&amp; Grey ();static const G4Colour&amp; Black ();static const G4Colour&amp; Red ();static const G4Colour&amp; Green ();static const G4Colour&amp; Blue ();static const G4Colour&amp; Cyan ();static const G4Colour&amp; Magenta ();static const G4Colour&amp; Yellow (); example1G4Colour myRed(G4Colour::Red()); 实例化Colour对象后，可以采用如下方式获得函数123G4double G4Colour::GetRed () const;G4double G4Colour::GetGreen () const;G4double G4Colour::GetBlue () const; Colour Map的应用123456789101112G4String G4Colour---------------------------------------white G4Colour::White ()gray G4Colour::Gray ()grey G4Colour::Grey ()black G4Colour::Black ()red G4Colour::Red ()green G4Colour::Green ()blue G4Colour::Blue ()cyan G4Colour::Cyan ()magenta G4Colour::Magenta ()yellow G4Colour::Yellow () Colours的检索可以采用如下方式1bool G4Colour::GetColour(const G4String&amp; key, G4Colour&amp; result) example1234567G4Colour myColour(G4Colour::Black());if (G4Colour::GetColour("red", myColour)) &#123;// Successfully retrieved colour "red". myColour is now red&#125;else &#123;// Colour did not exist in map. myColour is still black&#125;]]></content>
      <categories>
        <category>Geant4及Root应用</category>
      </categories>
      <tags>
        <tag>Geant4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Add menubar and search function to hexo blog]]></title>
    <url>%2F2018%2F09%2F09%2FHow-to-add-menubar-and-search-function-to-blog-with-hexo%2F</url>
    <content type="text"><![CDATA[Add MenubarIn the theme folder, we can find the following scripts in the _config.yml file.12345678910111213141516171819202122# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.# Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true The default menubars are home and archives. I want to add tags, categories and about to menubar. The problems appear when I only note off the options in the above scripts. After investigation about this problem, I find the ansower in this site http://www.360doc.com/content/18/0521/13/14715637_755685918.shtml method one to cite website this site method two to cite website Actually, we should add folder with commond hexo new page menubar_name, then corresponding folders will appear in the source folder which is the site configure source folder. Then add configure information in the correspongding index.md.Take tags for example. 1$ hexo new page tags We will see follow information in index.md. 1234---title: tagsdate: 2018-09-09 13:34:49--- Then we add type: &quot;tags&quot; to the index.md12345---title: tagsdate: 2018-09-09 13:34:49type: "tags"--- Similar methods are used to add categories and about to menubar. Add local search function to menubar install hexo-generator-search, hexo-theme-next search function depend on this package. 1$ npm install hexo-generator-search --save active the local search configure in theme configure file _config.yml. 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true #false modified by hubery lee @2018/9/9 # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo中插入图片测试]]></title>
    <url>%2F2018%2F09%2F01%2F%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[hexo 站点配置设置_config.yml 1post_asset_folder: true 安装插件12$ npm install hexo-asset-image --save$ npm install https://github.com/CodeFalling/hexo-asset-image -- save #该方法安装测试成功 图片引用123$ hexo new "newblog" 会有newblog.md和newblog文件夹，将需要引用的图片放到文件夹内 在newblog.md中图片的引用 1.标签引用 123$ &#123;% asset_path slug %&#125;$ &#123;% asset_img slug [title] %&#125;$ &#123;% asset_link slug [title] %&#125; /2018/09/01/图片测试/gitProcess.png 第三种方法 12345&#123;% asset_path gitProcess.png %&#125;&#123;% asset_img gitProcess.png 第二种方法 %&#125;&#123;% asset_link https://image.baidu.com/search/detail?ct=503316480&amp;z=&amp;tn=baiduimagedetail&amp;ipn=d&amp;word=%E7%8C%AB%E5%A4%B4%E9%B9%B0&amp;step_word=&amp;ie=utf-8&amp;in=&amp;cl=2&amp;lm=-1&amp;st=-1&amp;cs=2028628767,61876418&amp;os=4058183028,3413382511&amp;pn=0&amp;rn=1&amp;di=196345561830&amp;ln=1940&amp;fr=&amp;fmq=1535807535286_R&amp;fm=&amp;ic=0&amp;s=undefined&amp;se=&amp;sme=&amp;tab=0&amp;width=&amp;height=&amp;face=undefined&amp;is=0,0&amp;istype=2&amp;ist=&amp;jit=&amp;bdtype=0&amp;pi=0&amp;gsm=0&amp;objurl=http%3A%2F%2Fimg5q.duitang.com%2Fuploads%2Fblog%2F201502%2F08%2F20150208122643_s2BMS.jpeg&amp;rpstart=0&amp;rpnum=0&amp;adpicid=0&amp;ctd=1535807540714^3_1354X569%1 owl %&#125;&#123;% asset_link gitProcess.png 第三种方法 %&#125; 2.利用markdown 1![图片说明](XXX/图片.jpg) #XXX为文件夹名 12![图片测试1](图片测试/gitProcess.png)![图片测试2](gitProcess.png)]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git简易使用笔记]]></title>
    <url>%2F2018%2F09%2F01%2FGitUseGuide%2F</url>
    <content type="text"><![CDATA[创建仓库采用git init 在目录创建新的仓库 123$ mkdir newrepository #$ cd newrepository$ git init 或者直接采用 git init 仓库名 1$ git init newrepository 软件仓库下载下载仓库 git clone 拷贝到本地1$ get clone [url] 例如，从我的github上下载代码到本地1$ get clone https://github.com/Hubery-Lee/LeeEmacs-setting 软件仓库的快照git的日常使用git 的日常使用过程 git add 命令可将文件添加到缓存()git status 查看添加到缓存的文件状态 -s 简短结果输出 1234567891011121314151617181920212223242526$ touch README$ touch hello.php$ lsREADME hello.php$ git status -s?? README?? hello.php$ git add README hello.php $ git status -sA READMEA hello.php$ 在 README 添加以下内容：# Runoob Git 测试，然后保存退出。$ echo "# Runoob Git"&gt;&gt;README $ git status -sAM READMEA hello.php$ git add .$ git status -sA READMEA hello.php 执行 git diff 来查看执行 git status 的结果的详细信息。 git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。 尚未缓存的改动：git diff 查看已缓存的改动： git diff --cached 查看已缓存的与未缓存的所有改动：git diff HEAD 显示摘要而非整个 diff：git diff --stat git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。 接下来我们来查看下 git diff –cached 的执行效果： 123456789101112131415161718192021222324252627282930313233343536373839在 hello.php 文件中输入以下内容：&lt;?phpecho '菜鸟教程：www.runoob.com';?&gt;$ git status -sA READMEAM hello.php$ git diffdiff --git a/hello.php b/hello.phpindex e69de29..69b5711 100644--- a/hello.php+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+echo '菜鸟教程：www.runoob.com';+?&gt;$ git add hello.php $ git status -sA READMEA hello.php$ git diff --cacheddiff --git a/README b/READMEnew file mode 100644index 0000000..8f87495--- /dev/null+++ b/README@@ -0,0 +1 @@+# Runoob Git 测试diff --git a/hello.php b/hello.phpnew file mode 100644index 0000000..69b5711--- /dev/null+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+echo '菜鸟教程：www.runoob.com';+?&gt; git commit 将缓存区内容添加到仓库中123 配置用户名和邮箱地址$ git config --global user.name 'runoob'$ git config --global user.email test@runoob.com 提交缓存到仓库123456789$ git commit -m '第一次版本提交'[master (root-commit) d32cf1f] 第一次版本提交 2 files changed, 4 insertions(+) create mode 100644 README create mode 100644 hello.php$ git status# On branch masternothing to commit (working directory clean) git reset HEAD 命令用于取消已缓存的内容。同时修改README和hello.php,然后撤销hello.php的缓存12345678910111213141516171819$ git status -s M README M hello.php$ git add .$ git status -sM READMEM hello.pp$ git reset HEAD hello.php Unstaged changes after reset:M hello.php$ git status -sM README M hello.php$ git commit -m '修改'[master f50cfda] 修改 1 file changed, 1 insertion(+)$ git status -s M hello.php 仍然可以再次提交hello.php修改的内容123456$ git commit -am '修改 hello.php 文件'[master 760f74d] 修改 hello.php 文件 1 file changed, 1 insertion(+)$ git statusOn branch masternothing to commit, working directory clean 简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。 git rm如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。 123456$ git rm &lt;file&gt;$ git rm -f &lt;file&gt;$ git rm -r &lt;file&gt;$ git rm --cached &lt;file&gt;类似有git mv 移动和重命名$ git mv README README.md 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作 git中tag和branch的使用 创建分支、列出分支、切换分支、删除分支123456789101112131415161718192021222324252627$ git branch testing #创建testing分支$ git branch #列出分支* master testing$ git checkout testingSwitched to branch 'testing'$ git checkout masterSwitched to branch 'master'$ git checkout -b newtest #创建newtest分支并切换到该分支Switched to a new branch 'newtest'$ git branch -d testing #删除testing分支Deleted branch testing (was 85fc7e7).$ git branch * master newtest$ git merge newtest #将newtest分支合并到master分支Updating 2e082b7..556f0a0Fast-forward test2.txt | 1 - 1 file changed, 1 deletion(-) delete mode 100644 test2.txt 当同时记录到master的修改和branch分支的修改时，会出现合并分支冲突手动修改冲突部分采用git add 告诉git文件冲突已经解决；123456789101112131415161718192021222324252627282930313233$ git merge change_siteAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ cat test.txt &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADrunoob.com新增加一行=======www.runoob.com&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site$ vim test.txt $ cat test.txt www.runoob.com新增加一行$ git diffdiff --cc test.txtindex f84c2a4,bccb7c2..0000000--- a/test.txt+++ b/test.txt@@@ -1,2 -1,1 +1,2 @@@- runoob.com+ www.runoob.com +新增加一行$ git status -sUU test.txt$ git add test.txt $ git status -sM test.txt$ git commit[master 88afe0e] Merge branch 'change_site' 查看提交历史123456$ git log #详细提交历史$ git log --oneline #简洁提交历史$ git log --oneline --graph #--graph开启了拓扑图选项$ git log --reverse --oneline #用 '--reverse'参数来逆向显示所有日志。$ git log --author=Linus --oneline -5 #--author查找指定用户提交的记录$ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges#指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after --no-merges 选项以隐藏合并提交 标签写一句标签注解，就像你给提交写注解一样。1234567891011121314151617181920$ git tag -a v1.0 $ git log --oneline --decorate --graph #执行 git log --decorate 时，可以看到标签$ git tag -a v0.9 85fc7e7 #给提交代码85fc7e7追加标签$ git log --oneline --decorate --graph* 88afe0e (HEAD, tag: v1.0, master) Merge branch 'change_site'|\ | * d7e7346 (change_site) changed the site* | 14b4dca 新增加一行|/ * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 (tag: v0.9) test comment from runoob.com$ git tag #查看所有标签v0.9v1.0$ git tag -a &lt;tagname&gt; -m "runoob.com标签" #指定标签信息命令$ git tag -s &lt;tagname&gt; -m "runoob.com标签" #PGP签名标签命令 远程软件仓库的提取1234567891011121314$ git remote #查看远程仓库origin$ git remote -v #-v 参数，可以看到每个别名的实际链接地址。origin git@github.com:tianqixin/runoob-git-test.git (fetch)origin git@github.com:tianqixin/runoob-git-test.git (push)$ git fetch [alias] #从远程仓库下载分支和数据$ git fetch origin #从远程仓库下载origin分支和数据remote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Unpacking objects: 100% (3/3), done.From github.com:tianqixin/runoob-git-test 0205aab..febd8ed master -&gt; origin/master 远程软件仓库的上传123456789101112$ git merge [alias]/[branch] #以将服务器上的任何更新合并到你的当前分支$ git merge origin/master #从远端仓库提取数据并尝试合并到当前分支Updating 0205aab..febd8edFast-forward README.md | 1 + 1 file changed, 1 insertion(+)$ git push [alias] [branch] #推送你的新分支与数据到某个远端仓库$ git push origin master # 推送到 Githubgit remote rm [alias]git remote mv [aliasA] [aliasB] 获取软件仓库更改历史123456789101112131415$ git status$ git status -s$ git diff $ git diff --cached$ git log #详细提交历史$ git log --oneline #简洁提交历史$ git log --oneline --graph #--graph开启了拓扑图选项$ git log --reverse --oneline #用 '--reverse'参数来逆向显示所有日志。$ git log --author=Linus --oneline -5 #--author查找指定用户提交的记录$ git log --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges#指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after --no-merges 选项以隐藏合并提交$ git branch$ git tag$ git remote 回滚到软件仓库的历史版本1234$ git reset $ git reset HEAD [file]$ git reset --hard &lt;target_commit_id&gt;$ git reset --soft origin/source 命令（source 分支）]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo简易使用笔记]]></title>
    <url>%2F2018%2F09%2F01%2Fhexo%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[常用命令1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令12hexo s -g #生成并本地预览hexo d -g #生成并上传 hexo发布博客预览本地预览 1hexo s -g #生成并本地预览 然后，在浏览器中打开 http://localhost:4000/ 发布到github绑定的个人博客网页上 1hexo d -g #生成并上传 比如，我发布博客后，就直接可以采用个人网络域名访问 http://lihui-snippets.cn/ 具体github+hexo如何搭建个人博客教程可以百度以下；我觉得这篇博客写的比较好 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeeEmacs-setting]]></title>
    <url>%2F2018%2F09%2F01%2FLeeEmacs-setting%2F</url>
    <content type="text"><![CDATA[模块功能yasnippet 下载yasnippet安葬包，加压到~/.emacs.d/plugins目录下 在～/.emacs文件中配置yasnippet 1234567891011121314151617181920;; add yasnippet plugin (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")(require 'yasnippet)(yas-global-mode 1);;代码折叠(load-library "hideshow")(add-hook 'java-mode-hook 'hs-minor-mode)(add-hook 'perl-mode-hook 'hs-minor-mode)(add-hook 'php-mode-hook 'hs-minor-mode)(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)(add-hook 'c++-mode-hook 'hs-minor-mode)(add-hook 'c-mode-hook 'hs-minor-mode)(add-hook 'matlab-mode-hook 'hs-minor-mode)(add-hook 'fortran-mode-hook 'hs-minor-mode)(add-hook 'f90-mode-hook 'hs-minor-mode)(add-hook 'markdown-mode-hook 'hs-minor-mode)(add-hook 'org-mode-hook 'hs-minor-mode) 文件头个人信息设置——header2.el wiki 下载header2.el 将header2.el 放到~/.emacs.d/plugins文件夹下； 在～/.emacs文件中配置个人信息 12345678910111213141516171819202122;;====================info of user====================;;********************header**************************;;(load-file "~/.emacs.d/header2.el")(add-to-list 'load-path "~/.emacs.d/plugins" );; 设置文件头中的姓名(require 'header2)(setq user-full-name "Li Hui");; 设置邮箱(setq user-email-address "h*****@126.com") ;; 设置每次保存时要更新的项目(autoload 'auto-update-file-header "header2")(add-hook 'write-file-hooks 'auto-update-file-header)(autoload 'auto-make-header "header2")(add-hook 'emacs-lisp-mode-hook 'auto-make-header)(add-hook 'c-mode-common-hook 'auto-make-header) (add-hook 'c++-mode-common-hook 'auto-make-header)(add-hook 'text-mode-hook 'auto-make-header);;(add-hook 'make-header-hook 'header-shell nil t) 自动补全 auto-complete经过尝试，直接解压到~/.emacs.d/plugins文件夹然后make 和make install 然后在.emacs文件配置导入auto-complete插件，但并不能实现自动补全功能。但也没有报错；我认为可能是由于可能式auto-complete没有开启的缘故； 检测auto-complete有没有安装成功的方法 1安装完后，重启emacs然后输入ac，若出现可选的自动补全选项，那么说明已经安装成功了； auto-complete的安装方法——第二种安装成功（1）传统方法是采用解压到~/.emacs.d/plugins,然后make和make install，再在.emacs中进行配置 1234(add-to-list 'load-path "/home/hubery_lee/.emacs.d/plugins/auto-complete")(require 'auto-complete-config)(add-to-list 'ac-dictionary-directories "/home/hubery_lee/.emacs.d/plugins/auto-complete/ac-dict")(ac-config-default) （2）通过MELPA或MELPA Stable的package.el安装auto-complete.el；参考github这个开放者介绍的方法进行安装 https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md 首先，添加melpa或melpa-stable的package库 12345678(require 'package);; If you want to use latest version(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"));; If you want to use last tagged version(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))(package-initialize) 然后,利用package功能安装auto-complete 123在emacs的minibuffer里选取以下一种命令安装auto-complete M-x package-list-packages and select auto-complete M-x package-refresh-contents and M-x package-install auto-complete 最后，根据显示的安装路径，在.emacs中进行配置 1234567;; add auto-complete plugin(add-to-list 'load-path "/home/hubery_lee/.emacs.d/elpa/auto-complete-20170125.245")(require 'auto-complete-config)(add-to-list 'ac-dictionary-directories "/home/hubery_lee/.emacs.d/elpa/auto-complete-20170125.245/ac-dict")(ac-config-default) 自定义小功能1234567891011121314151617181920212223242526272829303132333435363738394041;;显示匹配的括号(show-paren-mode t) ;;光标显示为一竖线(setq-default cursor-type 'bar);;setting frame title (setq frame-title-format "%b - LiHui@CIRP");;鼠标指针避光标(mouse-avoidance-mode 'animate);;不生成临时文件(setq-default make-backup-files nil);;允许emacs和外部其他程序的粘贴(setq x-select-enable-clipboard t);;使用鼠标中键可以粘贴(setq mouse-yank-at-point t);; 自动的在文件末增加一新行;;(setq require-final-newline t);; 当光标在行尾上下移动的时候，始终保持在行尾。;;color;;(add-to-list 'load-path "~/.emacs.d/plugins");;(require 'color-theme);;(color-theme-subtle-hacker);;(color-theme-xemacs);;(color-theme-wheat);;(color-theme-calm-forest);;(color-theme-matrix);;(color-theme-robin-hood);;(color-theme-euphoria);;(color-theme-arjen);;(color-theme-jsc-dark);;hide tool bar(tool-bar-mode 0);; show line number(global-linum-mode 'linum-mode)]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>Emacs24.3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git-VS-SVN]]></title>
    <url>%2F2018%2F08%2F20%2FGit-VS-SVN%2F</url>
    <content type="text"><![CDATA[Git和SVN主要差别SVN只有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。Git每一个终端都是一个仓库，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。每一次的提取操作，实际上都是一次对代码仓库的完整备份。Git不仅仅是个版本控制系统，它也是个内容管理系统（CMS），工作管理系统等。 1.分布式VS集中式版本控制svn采用集中式版本控制 git采用分布式版本控制 两种版本控制的区别：（1）svn 过渡依赖中央服务器，出现故障影响其他工作;git中央服务器只用于方便交流，有没有中央服务器都行；（2）svn 版本库只保存在中央服务器，本地检测时不会检出版本库；git每个本地电脑均会保存完整的版本库；（3）svn 的commit依赖连接中央服务器的网络；git由于有本地版本库，可以commit不依赖网络，commit可以频繁使用；git 通过push来实现其他电脑的版本库的同步（synchronize）操作； 2.分支功能（1）svn 创建分支就是创建了一个新文件夹并拥有实际的文件，类似于拷贝了一份源文件，相当于在服务器上创建了分支，会影响到连接服务器的所有本地工作副本；git创建分支并没有创建文件夹，创建分支只是多了一个索引文件，并记录这个分支的变化，占用空间小，分支之间可以自由切换互不影响。（2）git具有代码审核功能，各个成员请求将自己的分子合并到主分支均需要管理人员进行审核。git的工作流程如下： 3.git的使用（1）安装配置（2）pc上任意获取，运行git clone url，将远程版本库克隆到本地（3）日常场景 a.创建一个新文件，并添加到版本库中使用命令：创建了一个新文件，需要添加到版本库里（追踪此文件）使用git add filename命令，我想保存一下，使用git commit -m ….. 我想把我改变的推送给其他人（服务器）git push -u origin master(提交代码)。12$ mkdir newDoc$ git add newDoc b.保存一下修改记录1$ git commit -m "提交添加一个新文件到版本库" #“”内为chang messages c.将我的修改推送给其他人或服务器1$ git push -u origin master 我想把别人改变的代码拉去过来其实有两种方法git fetch与git pull。它们都是将从服务器上拉取最新的代码。那么它们什么区别呢？Git fetch 是仅仅将代码拉取下来，而git pull 不仅将服务器上的代码拉去下来，而且进行了合并merge。总结一下就是git pull 包含了 git fetch + merge。 d.将别人的代码拉取过来1$ git pull 我想把别人改变的代码拉去过来其实有两种方法git fetch与git pull。它们都是将从服务器上拉取最新的代码。那么它们什么区别呢？Git fetch 是仅仅将代码拉取下来，而git pull 不仅将服务器上的代码拉去下来，而且进行了合并merge。总结一下就是git pull 包含了 git fetch + git merge。 e.删除原来的文件1$ git rm file #将会将file文件从暂存区与磁盘删除 原来的有个文件，想删除了，使用git rm file(停止追踪文件并从磁盘上删除),如果我们只想将 停止追踪文件，但是不删除只需要 git rm –cached 。然后想把这个改变推送给别人，就应该是用git commit 然后git push 将自己的改变推送到git服务器。 f.git分支功能的使用那么平时我们收到一个新功能的任务，应该是怎样的操作呢？比较正确的操作流程应该是这样，我们先使用git branch 查看一下我们本地到底有多少分支，然后我们先使用git branch 从develop分支新建一个分支featureN,然后使用git checkout &lt;branch/tag&gt; 切换到新建的featureN分支里。在新的分支里进行新功能开发。123$ git branch #查看分支$ git branch #新建分支featureN 即 &lt;new branch&gt;$ git checkout &lt;branch/tag&gt; #切换到新建的featureN分支里，在新的分支里进行新功能的开发。 g.恢复到某一时刻我们在进行新功能开发的时候，每实现一个小功能的时候，我们就git commit 进行提交一下，刚提交完，突然发现，这次提交的东西会严重影响其他功能，想撤销这次提交，我们需要使用git reset –hart HEAD 来撤销工作目录中所有未提交文件的修改内容。那么如果我们想撤销指定的一次提交呢？我们需要使用git revert 进行指定的提交。12$ git reset HEAD #撤回暂存中未提交的内容$ git revert &lt;commit&gt; #撤回一次指到定的提交 h.分支的合并假设开发完毕后，应该怎么做？对，就是将新功能的分支合并到develop分支里。就是先切换到develop分支里，然后使用git merge 命令进行合并。这时，新功能开发完毕，新建的featureN分支就没用了，我们使用git branch -d 将无用的分支删除。至此，我们新功能开发完毕。12$ git merge $ git branch -d &lt;branch&gt; i.查看工作日志1$ git log Git log 作用很大，功能也很多]]></content>
      <categories>
        <category>编程工具学习与应用</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
</search>
