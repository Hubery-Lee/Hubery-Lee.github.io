<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CMakeLists.txt编写基础知识</title>
      <link href="/2018/11/23/CMakeLists-txt%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/11/23/CMakeLists-txt%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://www.cnblogs.com/52php/p/5681745.html" target="_blank" rel="noopener">cmake 背景知识</a><br><a href="http://www.cnblogs.com/52php/p/5681751.html" target="_blank" rel="noopener">cmake 基础2</a><br><a href="http://www.cnblogs.com/52php/p/5681755.html" target="_blank" rel="noopener">cmake  共享库文件，外部链接</a></p><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><p><strong>说明</strong><br>采用c++的类来写hello world，然后编写教程。</p><ul><li>bin  二进制文档</li><li>build 链接文档</li><li>doc README、COPYRIGHT等的说明文档</li><li>inc 头文件文档  hello.hh</li><li>src 源文件文档  hello.cc<br>main.cc 为主文件</li></ul><p><strong>附录</strong></p><ul><li><p>main.cc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;hello.hh&quot;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  HelloFunc hi;</span><br><span class="line">  hi.Hello();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>hello.hh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#ifndef HELLO_hh</span><br><span class="line">#define HELLO_hh 1</span><br><span class="line"></span><br><span class="line">class HelloFunc</span><br><span class="line">&#123;</span><br><span class="line"> public:</span><br><span class="line">  HelloFunc();</span><br><span class="line">  virtual ~HelloFunc();  </span><br><span class="line">  </span><br><span class="line">  void Hello();</span><br><span class="line"> private:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li><li><p>hello.cc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;hello.hh&quot;</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">HelloFunc::HelloFunc()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloFunc::~HelloFunc()</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">void HelloFunc::Hello()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-CMakeList.txt 编译文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line">##  cmake module authored by Hubery Lee(李会)</span><br><span class="line">##  2018年11月22日 </span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 2.6 FATAL_ERROR) #</span><br><span class="line">set(PROJ_NAME hello)</span><br><span class="line">project($&#123;PROJ_NAME&#125;)</span><br><span class="line"></span><br><span class="line">#project($&#123;PROJ_NAME&#125; C CXX Fortran)</span><br><span class="line">#enable_language(Fortran) ##允许使用语言类型</span><br><span class="line">#set(CMAKE_BUILD_TYPE release) ##release or debug</span><br><span class="line">#set(CMAKE_CXX_FLAGS &quot;-std=c++11 $&#123;CMAKE_CXX_FLAGS&#125;&quot;) ##</span><br><span class="line"></span><br><span class="line">#------------------------------------</span><br><span class="line"># Include directory for this project</span><br><span class="line">#</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/inc)</span><br><span class="line"></span><br><span class="line">#------------------------------------</span><br><span class="line"># Locate sources and headers for this project</span><br><span class="line">#</span><br><span class="line">file(GLOB sources $&#123;PROJECT_SOURCE_DIR&#125;/src/*.cc)</span><br><span class="line">file(GLOB headers $&#123;PROJECT_SOURCE_DIR&#125;/inc/*.hh)</span><br><span class="line"></span><br><span class="line">#------------------------------------</span><br><span class="line"># Add the executable and link it to the libraries</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">add_executable($&#123;PROJ_NAME&#125; main.cc $&#123;sources&#125; $&#123;headers&#125;)</span><br><span class="line"></span><br><span class="line">#target_link_libraries($&#123;PROJ_NAME&#125; -L$&#123;PROJECT_SOURE_DIR&#125;/lib hello.so) ##链接库文件</span><br><span class="line"></span><br><span class="line">#-------------------------------------</span><br><span class="line"># Install the executable or files to &apos;bin&apos; directory</span><br><span class="line"># under CMAKE_INSTALL_PREFIX</span><br><span class="line">#</span><br><span class="line">install(TARGETS $&#123;PROJ_NAME&#125; DESTINATION bin)</span><br></pre></td></tr></table></figure></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h2 id="如何外部编译-？"><a href="#如何外部编译-？" class="headerlink" title="如何外部编译 ？"></a>如何外部编译 ？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/lib</span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=../ ../</span><br><span class="line">make -j4</span><br><span class="line">make install</span><br><span class="line">cd ../bin</span><br></pre></td></tr></table></figure><h2 id="设置二进制文件存放地址"><a href="#设置二进制文件存放地址" class="headerlink" title="设置二进制文件存放地址"></a>设置二进制文件存放地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line">SET(LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/lib)</span><br></pre></td></tr></table></figure><h2 id="如何生成动态库或静态库？"><a href="#如何生成动态库或静态库？" class="headerlink" title="如何生成动态库或静态库？"></a>如何生成动态库或静态库？</h2><p> <a href="https://blog.csdn.net/weixin_42111770/article/details/80595633" target="_blank" rel="noopener">参考文献</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.add_library(name SHARED source1, source2, ..., sourceN)</span><br><span class="line">2.add_library(name_static STATIC source1, source2, ... , sourceN)</span><br><span class="line">3.set_target_properties(name_static PROPERTIES OUTPUT_NAME &quot;name&quot;)</span><br><span class="line">4.set_target_properties(name_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)</span><br><span class="line">5.set_target_properties(name PROPERTIES CLEAN_DIRECT_OUTPUT 1)</span><br><span class="line">6.set_target_properties(name PROPERTIES VERSION 1.2 SOVERSION 1)</span><br><span class="line">7.install(TARGETS name name_static </span><br><span class="line">          LIBRARY DESTINATION lib</span><br><span class="line">          ARCHIVE DESTINATION lib)</span><br><span class="line">8.install(DIRECTORY $&#123;titile_H&#125; DESTINATION include/tH)</span><br></pre></td></tr></table></figure></p><p>第一条    指令是生成动态库（扩展名为.so），类型关键字是SHARED，并不需要写全libname.so，只需要填写name即可，cmake系统会自动生成libname.so。</p><p>第二条    指令是在支持动态库的基础上为工程添加一个静态库，因为静态库和动态库同名时，构建静态库的指令是无效的，所以把上面的name修改为name_static，就可以构建一个libname_static的静态库；然而我们需要的是名字相同的静态库和动态库，因为target的唯一性，所以就不能通过add_library指令实现，所以用到第三条指令</p><p>第三条    指令是为了能够同时得到libname.so/libname.a两个库文件，但是因为cmake在构建一个新的target时，会尝试清理掉具有相同命名的库文件，所以，在构建libname.a的时候会将libname.so库文件清理掉，因此需要再次使用set_target_properties定义的CLEAN_DIRECT_OUTPUT属性，如第四条和第五条指令所示，至此，我们再次进行构建，就会发现在目录中同时生成libname.so动态库文件和libname.a静态库文件</p><p>第六条    指令是因为按照规则，动态库是应当包含一个版本号的， 为了实现动态库版本号，仍然需要使用SET_TARGET_PROPERTIES指令，其中VERSON指代动态库版本，SOVERSION指代API版本。</p><p>第七条    指令是将动态库和静态库文件安装到系统目录，才能够真正地让其他人开发使用，我们将库文件安装到<prefix>/lib目录下</prefix></p><p>第八条    指令是将头文件安装到<prefix>/include/tH目录中。</prefix></p><h2 id="外部引用动态库和静态库"><a href="#外部引用动态库和静态库" class="headerlink" title="外部引用动态库和静态库"></a>外部引用动态库和静态库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.INCLUDE_DIRECTORIES(头文件在系统中的位置)</span><br><span class="line">2.ADD_EXECUTABLE(main source/main.cpp)</span><br><span class="line">3.TARGET_LINK_LIBRARIES(main libfaceDetection.a)</span><br></pre></td></tr></table></figure><p>因为编译安装将动态库安装到/usr/local/lib，/usr/bin目录下，对于动态库的外部引用有些麻烦；</p><h1 id="库文件的编译和封装"><a href="#库文件的编译和封装" class="headerlink" title="库文件的编译和封装"></a>库文件的编译和封装</h1><ul><li>新建<code>build</code>文件夹，将要编译成库文件的<code>inc</code>和<code>src</code>拷贝到<code>build</code>文件夹下，然后在此编写CMakeLists.txt 文件,在将头文件和源文件安装成库，CMakeLists的编写如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#----------------------------------------------------------------------------</span><br><span class="line"># Setup the project</span><br><span class="line">cmake_minimum_required(VERSION 2.6 FATAL_ERROR)</span><br><span class="line">set(PROJ_NAME hello)</span><br><span class="line">project($PROJ_NAME)</span><br><span class="line"></span><br><span class="line">#----------------------------------------------------------------------------</span><br><span class="line"># Setup Geant4 include directories and compile definitions</span><br><span class="line"># Setup include directory for this project</span><br><span class="line">#</span><br><span class="line">include_directories($&#123;PROJECT_SOURCE_DIR&#125;/inc)</span><br><span class="line"></span><br><span class="line">#----------------------------------------------------------------------------</span><br><span class="line"># Locate sources and headers for this project</span><br><span class="line"># NB: headers are included so they will show up in IDEs</span><br><span class="line">#</span><br><span class="line">file(GLOB sources $&#123;PROJECT_SOURCE_DIR&#125;/src/*.cc)</span><br><span class="line">file(GLOB headers $&#123;PROJECT_SOURCE_DIR&#125;/inc/*.hh)</span><br><span class="line"></span><br><span class="line">#-------------------------------------------</span><br><span class="line"># Create static and dynamic library</span><br><span class="line">#</span><br><span class="line">add_library($&#123;PROJ_NAME&#125; SHARED $&#123;sources&#125; $&#123;headers&#125;)</span><br><span class="line">set_target_properties($&#123;PROJ_NAME&#125; PROPERTIES VERSION 1.2 SOVERSION 1)</span><br><span class="line"></span><br><span class="line">#----------------------------------------------------------------------------</span><br><span class="line"># Install the executable to &apos;bin&apos; directory under CMAKE_INSTALL_PREFIX</span><br><span class="line">#</span><br><span class="line">#install(TARGETS $&#123;PROJ_NAME&#125;  DESTINATION lib)</span><br><span class="line">#install(FILES $&#123;headers&#125; DESTINATION inc)</span><br><span class="line">SET(LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;../../../lib)</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong> </p><ul><li>将可执行二进制文件安装到文件夹时，采用<code>install(TARGETS )</code>方式存在一定问题，生存的二进制文件在<code>usr/bin</code>，同理，头文件安装在<code>usr/local/inc</code>下。</li><li><code>SET(LIBRARY_OUTPUT_PATH )</code>可以设置库文件安装位置。</li><li>在<code>main()</code>的编译链接中，CMakeLists.txt将会存在以下问题，头文件必须包含生成库文件所用的全部头文件，链接生成的所有动态库文件；如，在上述的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_target_properties($&#123;PROJ_NAME&#125; PROPERTIES VERSION 1.2 SOVERSION 1)</span><br></pre></td></tr></table></figure></li></ul><p>其将，生成三个库文件，分别如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libhello.so</span><br><span class="line">libhello.so.1</span><br><span class="line">libhello.so.1.2</span><br></pre></td></tr></table></figure></p><p>在链接库文件时，则需要将三个库文件均包含</p><ul><li>API (Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。<a href="https://baike.baidu.com/item/api/10154" target="_blank" rel="noopener">百度百科</a></li></ul><h1 id="外部引用库的优势"><a href="#外部引用库的优势" class="headerlink" title="外部引用库的优势"></a>外部引用库的优势</h1><ul><li>隐藏源码</li><li>不依赖机器的性能和配置差异</li><li>二进制库文件位置明确，脱离源码可移植性高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Show RunTime and Solve Problem that Data ReadOut Are Disordered in Geant4 Multi-thread Mode</title>
      <link href="/2018/10/16/Show%20RunTime%20and%20Solve%20Problem%20that%20Data%20ReadOut%20Are%20Disordered%20in%20Geant4%20Multi-thread%20Mode/"/>
      <url>/2018/10/16/Show%20RunTime%20and%20Solve%20Problem%20that%20Data%20ReadOut%20Are%20Disordered%20in%20Geant4%20Multi-thread%20Mode/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog.">    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Geant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs yasnippets and markdown configure</title>
      <link href="/2018/10/11/Emacs-yasnippets-and-markdown-configure/"/>
      <url>/2018/10/11/Emacs-yasnippets-and-markdown-configure/</url>
      
        <content type="html"><![CDATA[<p>@<a href="emacs yasnippets 和makrdown的配置">TOC</a></p><h2 id="yasnippets-的配置"><a href="#yasnippets-的配置" class="headerlink" title="yasnippets 的配置"></a>yasnippets 的配置</h2><ul><li>安装</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.emacs.d/site-lisp</span><br><span class="line">git clone https://github.com/capitaomorte/yasnippet</span><br></pre></td></tr></table></figure><ul><li><p>配置==init.el==</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">add-to-list</span> 'load-path</span><br><span class="line">              <span class="string">"~/.emacs.d/site-lisp/yasnippet"</span>)</span><br><span class="line">(<span class="name">require</span> 'yasnippet)</span><br><span class="line">(<span class="name">setq</span> yas-snippet-dirs</span><br><span class="line">      '(<span class="string">"~/.emacs.d/snippets"</span> ;; personal snippets</span><br><span class="line">        ))</span><br><span class="line">(<span class="name">yas-global-mode</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加自定义模板</p><p> M-x yas-new-snippet 创建新模板<br> C-c C-c 保存</p></li><li><p>模板内容说明</p><p>contributor: snippet作者名称及电邮<br>snippet的语法变量是以$美元符开始的，根据变量$1 $2 $… 定义顺序光标移动位置，特殊的$0是最后光标停位置，语法${N:default value}。</p></li></ul><h2 id="markdown-的配置"><a href="#markdown-的配置" class="headerlink" title="markdown 的配置"></a>markdown 的配置</h2><ul><li><p><a href="https://blog.csdn.net/csdnmonkey/article/details/54934663" target="_blank" rel="noopener">参看这篇文章</a><br>google markdown emacs 配置<br><a href="https://linuxtoy.org/archives/emacs-markdown-mode.html" target="_blank" rel="noopener">https://linuxtoy.org/archives/emacs-markdown-mode.html</a></p></li><li><p>重点看下面这个，此为产品原网址。该网站介绍了产品的多种安装方式。<br>google markdown-mode<br>==<a href="http://jblevins.org/projects/markdown-mode/==" target="_blank" rel="noopener">http://jblevins.org/projects/markdown-mode/==</a>  </p></li><li><p>常用命令</p></li></ul><ul><li><code>C-c C-c m: markdown-command</code> &gt; <code>*markdown-output*</code> buffer.</li><li><code>C-c C-c p: markdown-command</code>&gt; temporary file&gt; browser.</li><li><code>C-c C-c e: markdown-command</code> &gt; <code>basename.html</code>.</li><li><code>C-c C-c v: markdown-command</code> &gt; <code>basename.html</code> &gt; browser.</li><li><code>C-c C-c w: markdown-command</code> &gt; kill ring.</li><li><code>C-c C-c o: markdown-open-command</code>.</li><li><code>C-c C-c l: markdown-live-preview-mode</code> &gt;<code>*eww*</code> buffer.</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.cnblogs.com/liweilijie/archive/2012/12/30/2840081.html" target="_blank" rel="noopener">https://www.cnblogs.com/liweilijie/archive/2012/12/30/2840081.html</a><br>[2] <a href="https://www.douban.com/note/551980740/" target="_blank" rel="noopener">https://www.douban.com/note/551980740/</a><br>[3] <a href="https://blog.csdn.net/csdnmonkey/article/details/54934663" target="_blank" rel="noopener">https://blog.csdn.net/csdnmonkey/article/details/54934663</a><br>[4] <a href="https://jblevins.org/projects/markdown-mode/" target="_blank" rel="noopener">https://jblevins.org/projects/markdown-mode/</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emacs24.3 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G4 Detector CopyNo and MotherCopyNo acess</title>
      <link href="/2018/10/11/G4-Detector-CopyNo-and-MotherCopyNo-acess/"/>
      <url>/2018/10/11/G4-Detector-CopyNo-and-MotherCopyNo-acess/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-construct-assembly-or-replices"><a href="#How-to-construct-assembly-or-replices" class="headerlink" title="How to construct assembly or replices"></a>How to construct assembly or replices</h2><p>You can refer to Geant4 Book for Application Developers <a href="http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/ForApplicationDeveloper/html/Detector/Geometry/geomAssembly.html" target="_blank" rel="noopener">User Guide</a></p><p>There are discriptions in the chapter4 Geometry/Assembly、Navigator、TouchableHandles.</p><h2 id="How-to-distinguish-different-detector-array-components"><a href="#How-to-distinguish-different-detector-array-components" class="headerlink" title="How to distinguish different detector array components"></a>How to distinguish different detector array components</h2><p>Using the ‘step’ to retrieve geometrical information</p><p>During the tracking run, geometrical information can be retrieved through the touchable handle associated to the current step. For example, to identify the exact copy-number of a specific physical volume in the mass geometry, one should do the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// Given the pointer to the step object ...</span><br><span class="line">//</span><br><span class="line">G4Step* aStep = ..;</span><br><span class="line"></span><br><span class="line">// ... retrieve the <span class="string">'pre-step'</span> point</span><br><span class="line">//</span><br><span class="line">G4StepPoint* preStepPoint = aStep-&gt;GetPreStepPoint();</span><br><span class="line"></span><br><span class="line">// ... retrieve a touchable handle and access to the information</span><br><span class="line">//</span><br><span class="line">G4TouchableHandle theTouchable = preStepPoint-&gt;GetTouchableHandle();</span><br><span class="line">G4int copyNo = theTouchable-&gt;GetCopyNumber();</span><br><span class="line">G4int motherCopyNo = theTouchable-&gt;GetCopyNumber(1);</span><br><span class="line"></span><br><span class="line">To determine the exact position <span class="keyword">in</span> global coordinates <span class="keyword">in</span> the mass geometry and convert to <span class="built_in">local</span> coordinates (<span class="built_in">local</span> to the current volume):</span><br><span class="line"></span><br><span class="line">G4ThreeVector worldPosition = preStepPoint-&gt;GetPosition();</span><br><span class="line">G4ThreeVector localPosition = theTouchable-&gt;GetHistory()-&gt;</span><br><span class="line">              GetTopTransform().TransformPoint(worldPosition);</span><br></pre></td></tr></table></figure><h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><p>the motherCopyNo start from 2 to motherNoCopy+1,  copyNo start from 0 to NoCopy-1;</p>]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geant4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Use Hit to Get Primary Information in Geant4</title>
      <link href="/2018/09/23/How-to-Use-Hit-to-Get-Primary-Information-in-Geant4/"/>
      <url>/2018/09/23/How-to-Use-Hit-to-Get-Primary-Information-in-Geant4/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Contact lihui to get the password.">    <label for="pass">Contact lihui to get the password.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geant4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Use Root to Draw 3D Histogram</title>
      <link href="/2018/09/23/How-to-Use-Root-to-Draw-3D-Histogram/"/>
      <url>/2018/09/23/How-to-Use-Root-to-Draw-3D-Histogram/</url>
      
        <content type="html"><![CDATA[<h2 id="Referrence"><a href="#Referrence" class="headerlink" title="Referrence"></a>Referrence</h2><p>Root/tutoriors/gl/glvox2.C</p><h2 id="Results-Shows"><a href="#Results-Shows" class="headerlink" title="Results Shows"></a>Results Shows</h2><p><img src="/2018/09/23/How-to-Use-Root-to-Draw-3D-Histogram/glovx2.png" alt="example1"><br><img src="/2018/09/23/How-to-Use-Root-to-Draw-3D-Histogram/c2.png" alt="example2"><br><img src="/2018/09/23/How-to-Use-Root-to-Draw-3D-Histogram/level41.png" alt="example3"></p>]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gean4 Data Read Out Methods</title>
      <link href="/2018/09/17/G4DataReadOutMethods/"/>
      <url>/2018/09/17/G4DataReadOutMethods/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction-of-Data-Aquisition-Methods-in-Geant4-Simulation"><a href="#Introduction-of-Data-Aquisition-Methods-in-Geant4-Simulation" class="headerlink" title="Introduction of Data Aquisition Methods in Geant4 Simulation"></a>Introduction of Data Aquisition Methods in Geant4 Simulation</h2><ul><li>G4ScoringManager</li><li>SteppingAction</li><li>TrackingAction</li><li>SensitiveDetctor + HitCollection</li></ul><p><img src="/2018/09/17/G4DataReadOutMethods/Geant4数据输出方式.png" alt="Geant4 Data Read Out Method"></p><p>More detail information about these methods to get data can you refer to <a href="https://wenku.baidu.com/view/f13f4725be23482fb5da4c63.html" target="_blank" rel="noopener">this site</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">A: To get the information at tracking time in a given volume A, one can adopt either one or a combination of the following strategies:</span><br><span class="line"></span><br><span class="line">1.  If the geometry is simple enough, and wish to score some commonly used physics quantities (e.g. energy deposition, dose, flux, etc.), just activate G4ScoringManager in your main program, and use the scorer-based UI commands to transform volume A into a scorer.</span><br><span class="line"></span><br><span class="line">    See Option 6 below, and the example examples/extended/runAndEvent/RE03.</span><br><span class="line"></span><br><span class="line">2.  Through the SteppingAction, check that the particle is inside volume A and do whatever needed. Hints can be found in the previous chapter of this FAQ document.</span><br><span class="line"></span><br><span class="line">    Usually, the hits containers and histograms are attributes of a Track, Event or Run and can be managed through either a TrackingAction, EventAction and/or RunAction and eventually messaging their pointer to the SteppingAction.</span><br><span class="line"></span><br><span class="line">    A similar approach is illustrated in examples/basic/B2, B4, extended/electromagnetic, optical, and many others…</span><br><span class="line"></span><br><span class="line">3.  In DetectorConstruction, by declaring volume A as a SensitiveDetector. At stepping time, the Geant4 kernel will automatically check that a particle is inside volume A and will handle the control to a specific function G4VSensitiveDetector::ProcessHits(). It is just necessary to instanciate a class inherited from G4VSensitiveDetector, say VolumeA_SD, and do whatever needed by implementing the function VolumeA_SD::ProcessHits(), as described in Option 2 above.</span><br><span class="line"></span><br><span class="line">4.  In addition to Option 3 above, should create a HitsCollection to store the information. A HitsCollection can be created in VolumeA_SD::Initialize(). A Hit can be created or filled in VolumeA_SD::ProcessHits(). Additional operations on HitsCollection can be performed in VolumeA_SD::EndOfEvent().</span><br><span class="line"></span><br><span class="line">    This approach is illustrated in examples/basic/B2, B4 and extended/analysis, extended/runAndEvent/RE01, etc…</span><br><span class="line"></span><br><span class="line">5.  In DetectorConstruction, volume A can be declared as SensitiveDetector, and one or several pre-defined scorers can be attached to volume A. In this case, neither a SteppingAction nor a spcific VolumeA_SD sensitive detector is needed any longer. It is just necessary to create a dedicated scorer, e.g. MyRunScorer, inherited from G4Run, and handle the HitsCollections within MyRunScorer::RecordEvent(). MyRunScorer itself can be instanciated from RunAction::GenerateRun().</span><br><span class="line"></span><br><span class="line">    This approach is illustrated in examples/novice/N07, extended/runAndEvent/RE02.</span><br><span class="line"></span><br><span class="line">6.  A set of build-in scorer-based UI commands allows to perform most possible operations described through the previous Option 5 directly from run-time macros.</span><br><span class="line"></span><br><span class="line">    See example extended/runAndEvent/RE03.</span><br></pre></td></tr></table></figure><h2 id="Detector-Response"><a href="#Detector-Response" class="headerlink" title="Detector Response"></a>Detector Response</h2><p>对于Geant4模拟数据输出与存储可以参看<code>examples/basic/B4</code>,对于不同的数据输出方式，看该文件夹下的<code>README</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">6- DETECTOR RESPONSE</span><br><span class="line"></span><br><span class="line">  The energy deposit and track lengths of the charged particles are recorded on</span><br><span class="line">  an event by event basis in the Absober and Gap layers.</span><br><span class="line">  </span><br><span class="line">  In order to demonstrate several possible ways of data scoring,</span><br><span class="line">  the example is provided in four variants:</span><br><span class="line">  </span><br><span class="line">  Variant a: User Actions</span><br><span class="line">  </span><br><span class="line">    These 4 quantities are data members of the B4aEventAction class.  </span><br><span class="line">    They are collected step by step in </span><br><span class="line">    B4aSteppingAction::UserSteppingAction(), and passed to the event action</span><br><span class="line">    via two methods: B4aEventAction::AddAbs() and B4aEventAction::AddGap().</span><br><span class="line">  </span><br><span class="line">    In B4aEventAction::EndOfEventAction(), these quantities are printed and </span><br><span class="line">    filled in H1D histograms and ntuple to accumulate statistic and compute </span><br><span class="line">    dispersion.</span><br><span class="line">    </span><br><span class="line">  Variant b: User data object </span><br><span class="line">  </span><br><span class="line">    In order to avoid dependencies between action classes, a user object</span><br><span class="line">    B4bRunData, derived from G4Run, is defined with data members needed </span><br><span class="line">    for the accounted information. </span><br><span class="line">    In order to reduce the number of data members a 2-dimensions array</span><br><span class="line">    is introduced for each quantity.</span><br><span class="line">    Then the quantities are collected step by step in user action classes:</span><br><span class="line">    B4bSteppingAction::UserSteppingAction() and </span><br><span class="line">    B4bEventAction::EndOfEventAction() in a similar way as in variant a. </span><br><span class="line">    </span><br><span class="line">  Variant c: Hits and Sensitive detectors</span><br><span class="line">  </span><br><span class="line">    In this option, the physics quantities are accounted using the hits</span><br><span class="line">    and sensitive detectors framework defined in the Geant4 kernel.  </span><br><span class="line">    The physics quantities are stored in B4cCalorHit via two B4cCalorimeterSD</span><br><span class="line">    objects, one associated with the Absorber volume and another one with Gap</span><br><span class="line">    in B4cDetectorConstruction::ConstructSDandField().</span><br><span class="line">    </span><br><span class="line">    In contrary to the B2 example (Tracker) where a new hit is created</span><br><span class="line">    with each track passing the sensitive volume (in the calorimeter), only one</span><br><span class="line">    hit is created for each calorimeter layer and one more hit to account for</span><br><span class="line">    the total quantities in all layers. In addition to the variants a and b,</span><br><span class="line">    the quantities per each layer are also available in addition to the total </span><br><span class="line">    quantities.</span><br><span class="line">    </span><br><span class="line">  Variant d: Scorer</span><br><span class="line">   </span><br><span class="line">    In this option, the Geant4 scorers which are defined on the top of hits</span><br><span class="line">    and sensitive detectors Geant4 framework are used.  </span><br><span class="line">    In practice this means that the user does not need to define hits and sensitive</span><br><span class="line">    detector classes but rather uses the classes already defined</span><br><span class="line">    in Geant4. In this example, the G4MultiFunctionalDetector with</span><br><span class="line">    G4PSEnergyDeposit and G4PSTrackLength primitive scores are used (see</span><br><span class="line">    B4dDetectorConstruction::ConstructSDandField()).</span><br><span class="line">   </span><br><span class="line">    Also with this approach, the quantities per each layer are available </span><br><span class="line">    in addition to the total quantities.</span><br><span class="line">      </span><br><span class="line"> 7- HISTOGRAMS</span><br><span class="line"></span><br><span class="line">  The analysis tools are used to accumulate statistics and compute the dispersion</span><br><span class="line">  of the energy deposit and track lengths of the charged particles.</span><br><span class="line">  H1D histograms are created in B4[b]RunAction::B4[b]RunAction() for the </span><br><span class="line">  following quantities:</span><br><span class="line">  - Energy deposit in absorber</span><br><span class="line">  - Energy deposit in gap</span><br><span class="line">  - Track length in absorber</span><br><span class="line">  - Track length in gap</span><br><span class="line">  The same values are also saved in an ntuple.</span><br><span class="line"></span><br><span class="line">  The histograms and the ntuple are saved in the output file in a format</span><br><span class="line">  according to a technology selected in B4Analysis.hh, the default in this example</span><br><span class="line">  is ROOT.</span><br><span class="line"></span><br><span class="line">  The accumulated statistic and computed dispersion is printed at the end of </span><br><span class="line">  run, in B4RunAction::EndOfRunAction().</span><br><span class="line">  When running in multi-threading mode, the histograms and the ntuple accumulated </span><br><span class="line">  on threads are merged in a single output file. While merging of histograms is</span><br><span class="line">  performed by default, merging of ntuples is explicitly activated in the B4RunAction </span><br><span class="line">  constructor.</span><br><span class="line"></span><br><span class="line">  The ROOT histograms and ntuple can be plotted with ROOT using the plotHisto.C</span><br><span class="line">  and plotNtuple.C macros.</span><br></pre></td></tr></table></figure><h2 id="Geant4-Simulation-Data-ReadOut-by-SensitiveDetctor-HitCollection-Methods"><a href="#Geant4-Simulation-Data-ReadOut-by-SensitiveDetctor-HitCollection-Methods" class="headerlink" title="Geant4 Simulation Data ReadOut by SensitiveDetctor + HitCollection Methods"></a>Geant4 Simulation Data ReadOut by SensitiveDetctor + HitCollection Methods</h2><h3 id="RunAction"><a href="#RunAction" class="headerlink" title="RunAction"></a>RunAction</h3><ul><li>RunAction()</li><li>~RunAction()</li><li>BegingOfRunAction(const G4Run *)</li><li>EndOfRunAction(const G4Run *)</li></ul><p>该方式的数据输出与存储参看<code>examples/basic/B4/B4c</code></p><h4 id="RunAction-构造函数"><a href="#RunAction-构造函数" class="headerlink" title="RunAction() 构造函数"></a>RunAction() 构造函数</h4><p>打开和关闭数据存储文件，在RunAction中；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// set printing event number per each event</span><br><span class="line">G4RunManager::GetRunManager()-&gt;SetPrintProgress(1);</span><br><span class="line"></span><br><span class="line">// Create analysis manager</span><br><span class="line">// The choice of analysis technology is done via selectin of a namespace</span><br><span class="line">// in B4Analysis.hh</span><br><span class="line">auto analysisManager = G4AnalysisManager::Instance();</span><br><span class="line">G4cout &lt;&lt; &quot;Using &quot; &lt;&lt; analysisManager-&gt;GetType() &lt;&lt; G4endl;</span><br><span class="line"></span><br><span class="line">analysisManager-&gt;SetVerboseLevel(1);</span><br><span class="line">analysisManager-&gt;SetNtupleMerging(true);  </span><br><span class="line">// Note: merging ntuples is available only with Root output</span><br><span class="line"></span><br><span class="line">// Book ntuples   </span><br><span class="line"></span><br><span class="line">//Declare ntuples</span><br><span class="line">// Creating 1st ntuple</span><br><span class="line">//</span><br><span class="line">analysisManager-&gt;CreateNtuple(&quot;Det&quot;, &quot;xyz in Det&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleSColumn(&quot;SDName&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleIColumn(&quot;EventID&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleIColumn(&quot;ParentID&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleIColumn(&quot;TrackID&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleIColumn(&quot;StepID&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;Edep&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;PosX&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;PosY&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;PosZ&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;GlobalT&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;LocalT&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;ProperT&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;Ekin&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;Velocity&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;MomentX&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;MomentY&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleDColumn(&quot;MomentZ&quot;);</span><br><span class="line">analysisManager-&gt;CreateNtupleSColumn(&quot;ProC&quot;);</span><br><span class="line"></span><br><span class="line">analysisManager-&gt;FinishNtuple();</span><br></pre></td></tr></table></figure><p>主要设置模拟运行参数，运行显示、多线程文件合并等；</p><ul><li><code>注意</code><br><code>B4c</code>中将内容目录也在构造函数中创建，文件的创建在BeginOfRunAction()中。</li></ul><h4 id="RunAction-析构函数"><a href="#RunAction-析构函数" class="headerlink" title="~RunAction() 析构函数"></a>~RunAction() 析构函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete G4AnalysisManager::Instance();</span><br></pre></td></tr></table></figure><h4 id="BeginOfRunAction-const-G4Run"><a href="#BeginOfRunAction-const-G4Run" class="headerlink" title="BeginOfRunAction(const G4Run*)"></a>BeginOfRunAction(const G4Run*)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Get analysis manager</span><br><span class="line">auto analysisManager = G4AnalysisManager::Instance();</span><br><span class="line"></span><br><span class="line">// Open an output file</span><br><span class="line">//</span><br><span class="line">G4String fileName = &quot;APNIS&quot;;</span><br><span class="line">analysisManager-&gt;OpenFile(fileName);</span><br></pre></td></tr></table></figure><p>新建储存文件并打开文件</p><h4 id="EndOfRunAction-const-G4Run"><a href="#EndOfRunAction-const-G4Run" class="headerlink" title="EndOfRunAction(const G4Run*)"></a>EndOfRunAction(const G4Run*)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auto analysisManager = G4AnalysisManager::Instance();</span><br><span class="line"></span><br><span class="line">// save histograms &amp; ntuple</span><br><span class="line">//</span><br><span class="line">analysisManager-&gt;Write();</span><br><span class="line">analysisManager-&gt;CloseFile();</span><br></pre></td></tr></table></figure><p>一个Run结束后的写文件</p><h3 id="EventAction"><a href="#EventAction" class="headerlink" title="EventAction"></a>EventAction</h3><p>采用SD+HitCollection方式存储数据，记录的是一个Event的所有Hit点的数据，那么Geant4中数据的存储就在EventAction中进行；</p><p>当然，如果你采用StepAction方式存储数据，你只需在StepAction中去存储数据就行了；</p><ul><li>EventAction()</li><li>~EventAction()</li><li>BeginOfEventAction(const G4Event*)</li><li>EndOfEventAction(const G4Event*)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">• beginOfEventAction() This method is invoked before converting the primary particles to G4Track</span><br><span class="line">objects. A typical use of this method would be to initialize and/or book histograms for a particular event.</span><br><span class="line">• endOfEventAction() This method is invoked at the very end of event processing. It is typically used for</span><br><span class="line">a simple analysis of the processed event. If the user wants to keep the currently processing event until</span><br><span class="line">the end of the current run, the user can invoke fpEventManager-&gt;KeepTheCurrentEvent(); so</span><br><span class="line">that it is kept in G4Run object. This should be quite useful if you simulate quite many events and want to</span><br><span class="line">visualize only the most interest ones after the long execution. Given the memory size of an event and its</span><br><span class="line">contents may be large, it is the user’s responsibility not to keep unnecessary events.</span><br></pre></td></tr></table></figure></li></ul><h4 id="EndOfEventAction-const-G4Event"><a href="#EndOfEventAction-const-G4Event" class="headerlink" title="EndOfEventAction(const G4Event*)"></a>EndOfEventAction(const G4Event*)</h4><p>在每个Event结束时，将Hit数据存储写到存储文件中。首先获取这个Event有多少个HitCollection,（HitCollection编号HCID在Event开始前获得，在BegingOfEventAction()中定义），然后根据HCID查找对应的HitCollection，根据不同HitCollection的大小提取数据并写入到文件；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">G4HCofThisEvent * HCE = event-&gt;GetHCofThisEvent();//获得Event结束时，所有的HitCollection</span><br><span class="line"></span><br><span class="line">//根据HitCollecitonID名称，获取不同的CollectionID</span><br><span class="line">if(HCE)&#123;</span><br><span class="line">PrimaryHC = (PLANETOCOSPrimaryHitsCollection*)(HCE-&gt;GetHC(primaryCollID));</span><br><span class="line">FluxHC = (PLANETOCOSFluxHitsCollection*)(HCE-&gt;GetHC(fluxdetectorCollID));</span><br><span class="line">//FluxHC = (PLANETOCOSFluxHitsCollection*)(HCE-&gt;GetHC(1));</span><br><span class="line">//G4cout&lt;&lt;&quot;ANALYSE1&quot;&lt;&lt;std::endl;</span><br><span class="line">EdepHC = (PLANETOCOSEdepHitsCollection*)(HCE-&gt;GetHC(edepCollID));</span><br><span class="line">SoilEdepHC = (PLANETOCOSEdepHitsCollection*)(HCE-&gt;GetHC(edepSoilCollID));</span><br><span class="line"></span><br><span class="line">//EdepHC = (PLANETOCOSEdepHitsCollection*)(HCE-&gt;GetHC(2));</span><br><span class="line">PostTrackHC = (PLANETOCOSPostTrackHitsCollection*)(HCE-&gt;GetHC(post_trackCollID));</span><br><span class="line">//PostTrackHC = (PLANETOCOSPostTrackHitsCollection*)(HCE-&gt;GetHC(3));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BeginOfEventAction-const-G4Event"><a href="#BeginOfEventAction-const-G4Event" class="headerlink" title="BeginOfEventAction(const G4Event*)"></a>BeginOfEventAction(const G4Event*)</h4><p>在Event开始前的行为，可以写在这个函数中；如下，获得不同HitCollection的编码HCID；注意，不同的HitCollection 对应不同的SD；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> G4SDManager * SDman = G4SDManager::GetSDMpointer();</span><br><span class="line"> if(edepCollID&lt;0||primaryCollID&lt;0||fluxdetectorCollID&lt;0 ||post_trackCollID &lt;0 || edepSoilCollID&lt;0)&#123;</span><br><span class="line"> edepCollID = SDman-&gt;GetCollectionID(&quot;edepCol&quot;);</span><br><span class="line">edepSoilCollID = SDman-&gt;GetCollectionID(&quot;edepSoilCol&quot;);</span><br><span class="line">primaryCollID = SDman-&gt;GetCollectionID(&quot;primaryCol&quot;);</span><br><span class="line">  fluxdetectorCollID = SDman-&gt;GetCollectionID(&quot;detCol&quot;);</span><br><span class="line">post_trackCollID = SDman-&gt;GetCollectionID(&quot;post_trackCol&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>当不考虑不同的SD，对所以SD的detector的响应都一样时采用如下方法读取数据；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">/////////////////////////////////////////////</span><br><span class="line">void APNISEventAction::EndOfEventAction(const G4Event* event)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  G4HCofThisEvent * hce = event-&gt;GetHCofThisEvent();</span><br><span class="line">  if (!hce) &#123;</span><br><span class="line">      G4ExceptionDescription msg;</span><br><span class="line">      msg &lt;&lt; &quot;No hits collection of this event found.&quot; &lt;&lt; G4endl; </span><br><span class="line">      G4Exception(&quot;APNISEventAction::EndOfEventAction()&quot;,</span><br><span class="line">                  &quot;APNISCode001&quot;, JustWarning, msg);</span><br><span class="line">      return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //get hit collection</span><br><span class="line">  if(hce)</span><br><span class="line">    &#123;</span><br><span class="line">      size_t nHCE=hce-&gt;GetCapacity();</span><br><span class="line">      for(size_t i=0;i&lt;nHCE;i++)&#123;//多个SD时用</span><br><span class="line">  APNISTrackHitsCollection *HC =0;</span><br><span class="line">      HC = (APNISTrackHitsCollection *)(hce-&gt;GetHC(i));</span><br><span class="line">      if(HC) OneHitOrder(HC);//写数据</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">////////////////////////////////////////////////////////////////</span><br><span class="line">void APNISEventAction::OneHitOrder(APNISTrackHitsCollection*HC)</span><br><span class="line">&#123;</span><br><span class="line">  //////////////////////////////////////////</span><br><span class="line">  //</span><br><span class="line">  // Fill histograms &amp; ntuple</span><br><span class="line">  //</span><br><span class="line">  //////////////////////////////////////////</span><br><span class="line"></span><br><span class="line">  // get analysis manager</span><br><span class="line">  auto analysisManager = G4AnalysisManager::Instance();</span><br><span class="line"></span><br><span class="line">  //analyse</span><br><span class="line">  G4int n_hit = HC-&gt;entries();</span><br><span class="line">  for(G4int i=0;i&lt;n_hit;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      G4String SDName =(*HC)[i]-&gt;GetSDName();</span><br><span class="line">      G4int    EventID=(*HC)[i]-&gt;GetEventID();//</span><br><span class="line">      G4int    ParentID=(*HC)[i]-&gt;GetParentID();//</span><br><span class="line">      G4int    TrackID=(*HC)[i]-&gt;GetTrackID();//</span><br><span class="line">      G4int    StepID=(*HC)[i]-&gt;GetStepID();//       // Total steps number up to now</span><br><span class="line">      G4double fEdep=(*HC)[i]-&gt;GetEdep();</span><br><span class="line">      G4ThreeVector fPos=(*HC)[i]-&gt;GetPos();</span><br><span class="line">      G4double GlobalTime=(*HC)[i]-&gt;GetGlobalTime();//                   //Time since event is created</span><br><span class="line">      G4double LocalTime=(*HC)[i]-&gt;GetLocalTime();//                  // Time since track is created</span><br><span class="line">      G4double ProperTime=(*HC)[i]-&gt;GetProperTime();//            // Time since track is created (in rest frame of particle)</span><br><span class="line">      G4double Ekin=(*HC)[i]-&gt;GetEkin();//                    </span><br><span class="line">      G4double Velocity=(*HC)[i]-&gt;GetVelocity();//</span><br><span class="line">      G4ThreeVector MomentumDirection = (*HC)[i]-&gt;GetMomentumDirection();      // Direction of momentum </span><br><span class="line">      G4String CreatorProcess=(*HC)[i]-&gt;GetCreatorProcess();//</span><br><span class="line"></span><br><span class="line">      //塞选思路</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      //存储数据</span><br><span class="line">      // fill ntuple</span><br><span class="line">      G4int Count=0;</span><br><span class="line">      analysisManager-&gt;FillNtupleSColumn(Count,SDName);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleIColumn(Count,EventID);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleIColumn(Count,ParentID);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleIColumn(Count,TrackID);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleIColumn(Count,StepID);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,fEdep/MeV);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,fPos.x()/m);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,fPos.y()/m);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,fPos.z()/m);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,GlobalTime/s);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,LocalTime/s);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,ProperTime/s);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,Ekin/MeV);Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,Velocity/(m/s));Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,MomentumDirection.x());Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,MomentumDirection.y());Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleDColumn(Count,MomentumDirection.z());Count++;</span><br><span class="line">      analysisManager-&gt;FillNtupleSColumn(Count,CreatorProcess);Count++;</span><br><span class="line"></span><br><span class="line">      // analysisManager-&gt;FillNtupleIColumn(Count,);Count++;</span><br><span class="line">      // analysisManager-&gt;FillNtupleDColumn(Count,);Count++;</span><br><span class="line">      // analysisManager-&gt;FillNtupleSColumn(Count,);Count++;</span><br><span class="line"></span><br><span class="line">      analysisManager-&gt;AddNtupleRow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Hit"><a href="#Hit" class="headerlink" title="Hit"></a>Hit</h3><p>参考Book for applicaiton中的4.4 <a href="http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/ForApplicationDeveloper/html/Detector/hit.html" target="_blank" rel="noopener">Hits</a></p><p>A hit is a snapshot of the physical interaction of a track in the sensitive region of a detector. In it you can store<br>information associated with a G4Step object. This information can be</p><ul><li>the position and time of the step,</li><li>the momentum and energy of the track,</li><li>the energy deposition of the step,</li><li>geometrical information,</li><li>or any combination of the above.</li></ul><p><code>简而言之</code></p><ul><li>G4中的Hit &lt;==&gt; C++中的vector  ，G4Allocator会给Hit分配内存空间；</li><li>G4中的Map &lt;==&gt; C++中的map</li></ul><h4 id="Hit-hh头文件结构"><a href="#Hit-hh头文件结构" class="headerlink" title="Hit.hh头文件结构"></a>Hit.hh头文件结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">APNISTrackHit();</span><br><span class="line">APNISTrackHit(const APNISTrackHit &amp;right);</span><br><span class="line">virtual ~APNISTrackHit();</span><br><span class="line">//operator</span><br><span class="line">const APNISTrackHit&amp; operator=(const APNISTrackHit &amp;right);</span><br><span class="line">G4int operator ==(const APNISTrackHit &amp;right)const;</span><br><span class="line"></span><br><span class="line">inline void *operator new(size_t);</span><br><span class="line">inline void operator delete(void *aHit);</span><br><span class="line"></span><br><span class="line">//获取数据</span><br><span class="line">inline void SetSDName(G4String name)&#123;SDName=name;&#125;</span><br><span class="line">inline const G4String&amp; GetSDName() const&#123;return SDName;&#125;</span><br><span class="line"></span><br><span class="line">inline void SetEventID(G4int id)&#123;EventID=id;&#125;//ok</span><br><span class="line">inline G4int GetEventID() const&#123;return EventID;&#125;//</span><br><span class="line"></span><br><span class="line">inline void SetParentID(G4int id)&#123;ParentID=id;&#125;//ok</span><br><span class="line">inline G4int GetParentID() const&#123;return ParentID;&#125;//</span><br><span class="line"></span><br><span class="line">inline void SetTrackID(G4int id)&#123;TrackID=id;&#125;//ok</span><br><span class="line">inline G4int GetTrackID() const&#123;return TrackID;&#125;//</span><br><span class="line"></span><br><span class="line">inline void SetStepID(G4int id)&#123;CurrentStepNumber=id;&#125;//ok</span><br><span class="line">inline G4int GetStepID() const&#123;return CurrentStepNumber;&#125;//</span><br><span class="line"></span><br><span class="line">inline void SetEdep(G4double de)&#123; fEdep = de; &#125;</span><br><span class="line">inline G4double GetEdep()&#123; return fEdep; &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>分配HitCollection存储空间，新建内存空间用完后并释放内存空间；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">///////////////////////////////////////////////////////////////</span><br><span class="line">typedef G4THitsCollection&lt;APNISTrackHit&gt; APNISTrackHitsCollection;</span><br><span class="line"></span><br><span class="line">extern G4ThreadLocal G4Allocator&lt;APNISTrackHit&gt;* APNISTrackHitAllocator;</span><br><span class="line">//////////////////////////////////////////////////////////////</span><br><span class="line">inline void* APNISTrackHit::operator new(size_t)</span><br><span class="line">&#123;</span><br><span class="line">  if(!APNISTrackHitAllocator) APNISTrackHitAllocator = new G4Allocator&lt;APNISTrackHit&gt;;</span><br><span class="line">  return (void *)APNISTrackHitAllocator-&gt;MallocSingle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void APNISTrackHit::operator delete(void* aHit)</span><br><span class="line">&#123;</span><br><span class="line">  APNISTrackHitAllocator-&gt;FreeSingle((APNISTrackHit*)aHit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hit-cc"><a href="#Hit-cc" class="headerlink" title="Hit.cc"></a>Hit.cc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">////////////////////////////////////////////////////////</span><br><span class="line">APNISTrackHit::APNISTrackHit(const APNISTrackHit &amp;right):G4VHit()</span><br><span class="line">&#123;</span><br><span class="line">  SDName =right.SDName;</span><br><span class="line">  EventID=right.EventID;</span><br><span class="line">  ParentID =right.ParentID;</span><br><span class="line">  TrackID =right.TrackID;</span><br><span class="line">  CurrentStepNumber =right.CurrentStepNumber;</span><br><span class="line">  fEdep = right.fEdep;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">////////////////////////////////////////////////////////</span><br><span class="line">//</span><br><span class="line">// operator</span><br><span class="line">const APNISTrackHit&amp; APNISTrackHit::operator=(const APNISTrackHit &amp;right)</span><br><span class="line">&#123;</span><br><span class="line">  SDName =right.SDName;</span><br><span class="line">  EventID=right.EventID;</span><br><span class="line">  ParentID =right.ParentID;</span><br><span class="line">  TrackID =right.TrackID;</span><br><span class="line">  CurrentStepNumber =right.CurrentStepNumber;</span><br><span class="line">  fEdep = right.fEdep;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  return *this;</span><br><span class="line">&#125;</span><br><span class="line">////////</span><br><span class="line">G4int APNISTrackHit::operator==(const APNISTrackHit &amp;right) const</span><br><span class="line">&#123;</span><br><span class="line">  return (this==&amp;right) ? 1 : 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SensitiveDetector"><a href="#SensitiveDetector" class="headerlink" title="SensitiveDetector"></a>SensitiveDetector</h3><p>SD的作用时根据Step和Track信息，构建Hit信息；SD有以下一些函数：</p><ul><li>ProcessHits()</li><li>Initialize()</li><li>EndOfEvent()</li></ul><h4 id="ProcessHits-G4Step-aStep-G4TouchableHistory"><a href="#ProcessHits-G4Step-aStep-G4TouchableHistory" class="headerlink" title="ProcessHits(G4Step aStep, G4TouchableHistory)"></a>ProcessHits(G4Step<em> aStep, G4TouchableHistory</em>)</h4><p>在ProcessHits()中将数据存入Hit()申明的存储空间中;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ProcessHits() This method is invoked by G4SteppingManager when a step is composed in the</span><br><span class="line">G4LogicalVolume which has the pointer to this sensitive detector. The first argument of this method is</span><br><span class="line">a G4Step object of the current step. The second argument is a G4TouchableHistory object for the</span><br><span class="line">Readout geometry described in the next section. The second argument is NULL if Readout geometry</span><br><span class="line">is not assigned to this sensitive detector. In this method, one or more G4VHit objects should be constructed if</span><br><span class="line">the current step is meaningful for your detector.</span><br><span class="line">Initialize() This method is invoked at the beginning of each event. The argument of this method is an object</span><br><span class="line">of the G4HCofThisEvent class. Hit collections, where hits produced in this particular event are stored,</span><br><span class="line">can be associated with the G4HCofThisEvent object in this method. The hit collections associated with</span><br><span class="line">the G4HCofThisEvent object during this method can be used for during the event processing</span><br><span class="line">digitization.</span><br></pre></td></tr></table></figure><p>example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> G4StepPoint* preStepPoint=aStep-&gt;GetPreStepPoint();</span><br><span class="line"> G4StepPoint* postStepPoint=aStep-&gt;GetPostStepPoint();</span><br><span class="line"> G4Track* aTrack=aStep-&gt;GetTrack();</span><br><span class="line"></span><br><span class="line"> // G4double edep = aStep-&gt;GetTotalEnergyDeposit();</span><br><span class="line"> // if(edep==0.) return false;</span><br><span class="line"> G4ParticleDefinition* theparticle=aStep-&gt;GetTrack()-&gt;GetDefinition();</span><br><span class="line"> G4String PName=theparticle-&gt;GetParticleName();</span><br><span class="line"></span><br><span class="line"> G4TouchableHandle touch1 = preStepPoint-&gt;GetTouchableHandle();</span><br><span class="line"> G4VPhysicalVolume* volume = touch1-&gt;GetVolume();</span><br><span class="line"></span><br><span class="line">if(preStepPoint-&gt;GetStepStatus()==fGeomBoundary)</span><br><span class="line">  &#123;</span><br><span class="line">    // if(volume-&gt;GetName()==&quot;AirDet&quot;)</span><br><span class="line">    //   &#123;</span><br><span class="line">    APNISTrackHit* newHit1 = new APNISTrackHit();</span><br><span class="line">    // G4cout&lt;&lt;&quot;####----In AirDet----&quot;&lt;&lt;SensitiveDetectorName&lt;&lt;G4endl;</span><br><span class="line">    newHit1-&gt;SetSDName(volume-&gt;GetName());</span><br><span class="line">    newHit1-&gt;SetEventID(G4EventManager::GetEventManager()-&gt;GetConstCurrentEvent()-&gt;GetEventID());//ok</span><br><span class="line">    newHit1-&gt;SetParentID(aTrack-&gt;GetParentID());//ok</span><br><span class="line">    newHit1-&gt;SetTrackID(aTrack-&gt;GetTrackID());//ok</span><br><span class="line">    newHit1-&gt;SetStepID(aTrack-&gt;GetCurrentStepNumber());//ok</span><br><span class="line"></span><br><span class="line">    newHit1-&gt;SetEdep( aStep-&gt;GetTotalEnergyDeposit() );</span><br><span class="line">    newHit1-&gt;SetPos( aStep-&gt;GetPreStepPoint()-&gt;GetPosition());</span><br><span class="line">    newHit1-&gt;SetGlobalTime(preStepPoint-&gt;GetGlobalTime());//ok</span><br><span class="line">    newHit1-&gt;SetLocalTime(preStepPoint-&gt;GetLocalTime());//ok</span><br><span class="line">    newHit1-&gt;SetProperTime(preStepPoint-&gt;GetProperTime());//ok</span><br><span class="line">    newHit1-&gt;SetEkin(preStepPoint-&gt;GetKineticEnergy());//ok</span><br><span class="line">    newHit1-&gt;SetVelocity(preStepPoint-&gt;GetVelocity());//ok</span><br><span class="line">    newHit1-&gt;SetMomentumDirection(preStepPoint-&gt;GetMomentumDirection());//ok</span><br><span class="line">    const G4VProcess* pcr=aTrack-&gt;GetCreatorProcess();</span><br><span class="line">    if(pcr)newHit1-&gt;SetCreatorProcess(pcr-&gt;GetProcessName());</span><br><span class="line">    else newHit1-&gt;SetCreatorProcess(&quot;##&quot;);//ok</span><br><span class="line">    //数据存储到HitCollection中</span><br><span class="line">    fTrackHitCollection-&gt;insert( newHit1 );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="Initialize-G4HCofThisEvent-HCE"><a href="#Initialize-G4HCofThisEvent-HCE" class="headerlink" title="Initialize(G4HCofThisEvent* HCE)"></a>Initialize(G4HCofThisEvent* HCE)</h4><p>初始化HitsCollection，将数据存入HitsCollection前都需将空间初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Initialize() This method is invoked at the beginning of each event. The argument of this method is an object</span><br><span class="line">of the G4HCofThisEvent class. Hit collections, where hits produced in this particular event are stored,</span><br><span class="line">can be associated with the G4HCofThisEvent object in this method. The hit collections associated with</span><br><span class="line">the G4HCofThisEvent object during this method can be used for during the event processing</span><br><span class="line">digitization.</span><br></pre></td></tr></table></figure></p><p>example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void PLANETOCOSSoilSD::Initialize(G4HCofThisEvent*HCE)</span><br><span class="line">&#123; static int HCID = -1;</span><br><span class="line">  </span><br><span class="line">  SoilEdepHitCollection = new PLANETOCOSEdepHitsCollection</span><br><span class="line">                                  (SensitiveDetectorName,collectionName[0]);</span><br><span class="line">  </span><br><span class="line">  HCID = GetCollectionID(0);</span><br><span class="line">  HCE-&gt;AddHitsCollection(HCID,SoilEdepHitCollection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void B4cCalorimeterSD::Initialize(G4HCofThisEvent* hce)</span><br><span class="line">&#123;</span><br><span class="line">  // Create hits collection</span><br><span class="line">  fHitsCollection </span><br><span class="line">    = new B4cCalorHitsCollection(SensitiveDetectorName, collectionName[0]); </span><br><span class="line"></span><br><span class="line">  // Add this collection in hce</span><br><span class="line">  auto hcID </span><br><span class="line">    = G4SDManager::GetSDMpointer()-&gt;GetCollectionID(collectionName[0]);</span><br><span class="line">  hce-&gt;AddHitsCollection( hcID, fHitsCollection ); </span><br><span class="line"></span><br><span class="line">  // Create hits</span><br><span class="line">  // fNofCells for cells + one more for total sums </span><br><span class="line">  for (G4int i=0; i&lt;fNofCells+1; i++ ) &#123;</span><br><span class="line">    fHitsCollection-&gt;insert(new B4cCalorHit());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void APNISTrackSD::Initialize(G4HCofThisEvent* HCE)</span><br><span class="line">&#123;</span><br><span class="line">  // static int HCID = -1;</span><br><span class="line">  fTrackHitCollection = new APNISTrackHitsCollection</span><br><span class="line">                      (SensitiveDetectorName,collectionName[0]); </span><br><span class="line">  // if(HCID&lt;0)</span><br><span class="line">  // &#123; HCID = GetCollectionID(0); &#125;</span><br><span class="line"></span><br><span class="line">  // get the collection name according to the object(name).</span><br><span class="line">  if(HCID&lt;0)&#123;</span><br><span class="line">    HCID = G4SDManager::GetSDMpointer()</span><br><span class="line">      -&gt;GetCollectionID(fTrackHitCollection);</span><br><span class="line">  &#125;</span><br><span class="line">  HCE-&gt;AddHitsCollection(HCID,fTrackHitCollection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>到这里，数据文件打开，写入；数据的传递与存储就介绍完了；RunAction中实现对数据文件的打开与关闭；EventAction中实现将数据写入到文件，当然，如果你采用SteppingAction方式也可以将数据写入文件（此文不再介绍）；Hit中实现给需要传递的数据分配内存空间；SensitiveDetector中实现将数据传递给Hit分配的内存空间；如果将这个问题表述为送快递的过程，那么RunAction就是告诉快递员有堆快递需要在什么时候开始送，什么时候完全送达；EventAction就是需要送的快递，Hit就是送一份快递，给快递员分配的货箱大小；SensitiveDetector就是告诉快递员将货物放到货箱里；</p><p><img src="/2018/09/17/G4DataReadOutMethods/Geant4SD_Hit.png" alt="SensitiveDetector+HitsCollection方式存储数据方法示意图"></p>]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geant4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next theme Setting</title>
      <link href="/2018/09/14/Hexo-Next-theme-Setting/"/>
      <url>/2018/09/14/Hexo-Next-theme-Setting/</url>
      
        <content type="html"><![CDATA[<p><a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">referrence site1</a><br><a href="https://blog.csdn.net/w_ngzeqi/article/details/73863543" target="_blank" rel="noopener">referrence site2</a>  文章版权声明、文章加密访问、字数、时长、访问量 <a href="https://www.jianshu.com/p/1ff2fcbdd155" target="_blank" rel="noopener">another site</a><br><a href="https://blog.csdn.net/qq_32454537/article/details/79482896" target="_blank" rel="noopener">referrence site3</a> 侧边栏社交小图标设置、设置网站图标、评论功能插件配置<br><a href="https://blog.csdn.net/manmandong123/article/details/80739126" target="_blank" rel="noopener">referrence site3</a> 添加评论功能<a href="https://blog.csdn.net/qq_32454537/article/details/79482879" target="_blank" rel="noopener">another site</a><br><a href="https://blog.csdn.net/lanuage/article/details/78991798" target="_blank" rel="noopener">Somebody’s blog Note</a> 站外分享 <a href="https://asdfv1929.github.io/categories/GitBlog/" target="_blank" rel="noopener">another site</a><br><a href="https://blog.csdn.net/qq_30242609/article/details/54799019" target="_blank" rel="noopener">referrence sit4</a> 修改主题配色</p><p>对于文章版权声明功能，可以直接去next主题下的<code>_config.yml</code>中开启，个人认为抱着开源开放特性，这个功能并不是很重要；</p><h2 id="设置版权信息"><a href="#设置版权信息" class="headerlink" title="设置版权信息"></a>设置版权信息</h2><p>1.在next主题下的next/_config.yml中设置copyright;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line">post_copyright:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: <span class="comment">#https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br></pre></td></tr></table></figure></p><p>在hexo站点配置文件_config.yml中设置url;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://lihui-snippets.cn/ <span class="comment">#https://github.com/Hubery-Lee</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults: http://lihui-snippets.cn</span><br></pre></td></tr></table></figure></p><h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><h3 id="该加密方法密码暴露在网页调试代码中"><a href="#该加密方法密码暴露在网页调试代码中" class="headerlink" title="该加密方法密码暴露在网页调试代码中"></a>该加密方法密码暴露在网页调试代码中</h3><ol><li>配置加密功能，打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在以下位置<img src="/2018/09/14/Hexo-Next-theme-Setting/Hexo-Next-theme-Setting\password.png" alt>插入这样一段代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    (function()&#123;</span></span><br><span class="line"><span class="undefined">        if('&#123;&#123; page.password &#125;&#125;')&#123;</span></span><br><span class="line"><span class="undefined">            if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123;</span></span><br><span class="line"><span class="undefined">                alert('密码错误！');</span></span><br><span class="line"><span class="undefined">                history.back();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>在scaffolds文件夹post.md文件中，加入<code>password:</code>,新建博客将有如下的形式文件头；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">description:</span><br><span class="line">password: </span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>2.设置给文章设置访问密码，经过以上的配置，<code>hexo new &quot;newblog&quot;</code>在<code>password: #密码</code>设置密码；也可以在以往的文章设置加密访问，只需在文章头中加入<code>password: #密码</code>即可；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: The use of gnome-screenshot <span class="built_in">command</span></span><br><span class="line">date: 2018-09-11 16:12:50</span><br><span class="line">tags: [linux tool]</span><br><span class="line">categories: linux tool</span><br><span class="line">description: gnome-screenshot <span class="built_in">command</span></span><br><span class="line">password: pass</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>如，要访问这篇The use of gnome-screenshot command文章就需要输入密码pass;</p><h3 id="该加密方法加密效果更好"><a href="#该加密方法加密效果更好" class="headerlink" title="该加密方法加密效果更好"></a>该加密方法加密效果更好</h3><p>以上方法给文章加密，可以通过浏览器调试界面看到网页密码，故而考虑另外的文章加密方式，可以参考留言版中的<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.md" target="_blank" rel="noopener">hexo-blog-encrypt</a>地址尝试另一种加密方式；注意，对next主题，安装<code>hexo-blog-encrypt2.0.*</code>;对加密文章的头文件写法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: The use of gnome-screenshot <span class="built_in">command</span></span><br><span class="line">date: 2018-09-11 16:12:50</span><br><span class="line">tags: [linux tool]</span><br><span class="line">categories: linux tool</span><br><span class="line">abstract: gnome-screenshot <span class="built_in">command</span>;encrypt this article</span><br><span class="line">password: pass</span><br><span class="line">message: Please input password to <span class="built_in">read</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>其中，<code>abstract</code>后面写的是摘要，即是非加密文章头的<code>description</code>功能一样；<code>message</code>是加密文章所特有，指的是设置提示输入密码；<code>password</code>后面是设置的密码；<br>Bug在打开文章页面后，不再显示摘要，解决办法是再加一遍<code>description</code>,故而，完全正确的加密文章抬头应该这么写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: The use of gnome-screenshot <span class="built_in">command</span></span><br><span class="line">date: 2018-09-11 16:12:50</span><br><span class="line">tags: [linux tool]</span><br><span class="line">categories: linux tool</span><br><span class="line">abstract: gnome-screenshot <span class="built_in">command</span>;encrypt this article</span><br><span class="line">password: pass</span><br><span class="line">message: Please input password to <span class="built_in">read</span></span><br><span class="line">description: gnome-screenshot <span class="built_in">command</span>;encrypt this article</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>经过测试，直接用<code>description</code>替代<code>abstract</code>也能达到这样的效果,并不存在Bug；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: The use of gnome-screenshot <span class="built_in">command</span></span><br><span class="line">date: 2018-09-11 16:12:50</span><br><span class="line">tags: [linux tool]</span><br><span class="line">categories: linux tool</span><br><span class="line">description: gnome-screenshot <span class="built_in">command</span>;encrypt this article</span><br><span class="line">password: pass</span><br><span class="line">message: Please input password to <span class="built_in">read</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p><code>Bug: 第二种加密方式，没法自动生成文章目录栏；</code></p><h2 id="访问量设置"><a href="#访问量设置" class="headerlink" title="访问量设置"></a>访问量设置</h2><p>采用busuanzi 和leancloud设置，在themes的文件夹下<code>_config.yml</code>中打开busuanzi配置，如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  site_uv_header: &lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line">  page_pv: <span class="literal">false</span></span><br><span class="line">  page_pv_header: &lt;i class=<span class="string">"fa fa-file-eye"</span>&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure></p><p>其中，<code>site_uv</code>指的是user visitors,<code>site_pv</code>指的是passager visitors; <code>&lt;i class=&quot;fa fa-file-eye&quot;&gt;&lt;/i&gt;</code>设置的是显示图标</p><p>对于文章的阅读量也可采用leancloud的应用来设置，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line">leancloud_visitors:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  app_id:  <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line">  app_key:   <span class="comment">#&lt;app_key&gt;</span></span><br></pre></td></tr></table></figure></p><p>相对于busuanzi统计计数方法，leancloud方法能通过leancloud账户管理，并且leancloud统计的阅读量能够在首页显示；busuanzi统计数据无法在首页显示；leancloud应用的配置可以参考这篇文章 <a href="https://www.meiwen.com.cn/subject/yssswftx.html" target="_blank" rel="noopener">参考文章链接</a></p><h2 id="评论功能设置"><a href="#评论功能设置" class="headerlink" title="评论功能设置"></a>评论功能设置</h2><p>评论功能采用leancloud valine应用，国内其他的友言、畅言和以及来必力都不能匿名评论，国外的gitalk,gitment以github用户授权评论，Hypercomments，Disqus等都被国内墙的厉害；只有国内leancloud应用具有匿名评论功能；在next主题下的<code>_config.yml</code>配置如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  appid:  ooozwlclX00aJabPvk1WTj7J-gzGzoHsz <span class="comment"># your leancloud application appid</span></span><br><span class="line">  appkey:  CnXrRUVdUdMXgEvGbdolWGYX <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  notify: <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  verify: <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  placeholder: Just go go <span class="comment"># comment box placeholder</span></span><br><span class="line">  avatar: mm <span class="comment"># gravatar style</span></span><br><span class="line">  guest_info: nick,mail,link <span class="comment"># custom comment header</span></span><br><span class="line">  pageSize: 10 <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure></p><h2 id="站外分享功能"><a href="#站外分享功能" class="headerlink" title="站外分享功能"></a>站外分享功能</h2><p>具体的配置，可以参考文章开头列出的参考链接；在此，我只是用next主题模版，不作具体深入配置，工作中心放在作笔记上；在<code>_config.yml</code>中，打开百度分享选项即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Share</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    button | slide</span></span><br><span class="line"><span class="comment"># Warning: Baidu Share does not support https.</span></span><br><span class="line">baidushare:</span><br><span class="line">  <span class="built_in">type</span>: slide</span><br></pre></td></tr></table></figure></p><h2 id="侧边栏社交小图标设置"><a href="#侧边栏社交小图标设置" class="headerlink" title="侧边栏社交小图标设置"></a>侧边栏社交小图标设置</h2><p>next主题的网站小图标采用FrontAwesome插件<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">frontawesome icon site</a>;在实际应用中，在frontawesome网站搜索图标，在next主题的配置文件中用名字直接应用就行了，举例如下；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target permalink.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/Hubery-Lee || github</span><br><span class="line">  Runoob: https://www.runoob.com || cube</span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  icons_only: <span class="literal">false</span></span><br><span class="line">  transition: <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>以上脚本中的<code>github,cube</code>即是在frontawesome上搜索到的图标名称；同样，links的图标也是这么配置的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line">links_icon: globe</span><br><span class="line">links_title: Index</span><br><span class="line"><span class="comment">#links_layout: block</span></span><br><span class="line">links_layout: inline</span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line">  Geant4: http://geant4.web.cern.ch/</span><br><span class="line">  Root: https://root.cern.ch/</span><br></pre></td></tr></table></figure></p><p>其中，<code>globe</code>即是frontawesome搜索到的图标名称；</p><h2 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h2><p>若要对网站图标进行修改，只需将你要改的图标拷贝到<code>themes/next/source/images/</code>文件夹下，并修改<code>themes/next/_config.yml</code>文件中的，favicon后面对应的图片文件名即可；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For example, you put your favicons into `hexo-site/source/images` directory.</span></span><br><span class="line"><span class="comment"># Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.</span></span><br><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure></p><h2 id="主题配色修改"><a href="#主题配色修改" class="headerlink" title="主题配色修改"></a>主题配色修改</h2><p>修改<code>themes/next/source/css/_variables/base.styl</code>文件；具体配色，暂时没有调整；另外<code>next/_config.yml</code>中有5种可直接用的配色方案，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure></p><h2 id="头部顶栏背景颜色或图片设置"><a href="#头部顶栏背景颜色或图片设置" class="headerlink" title="头部顶栏背景颜色或图片设置"></a>头部顶栏背景颜色或图片设置</h2><p>1.在themes/next/source/css/_schemes/Mist/_header.styl中以下代码中修改颜色（我采用Next-Mist主题）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header &#123; background: <span class="variable">$blue</span>-bright; &#125;</span><br></pre></td></tr></table></figure></p><p>2.也可改为背景图片，背景图片的添加如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header &#123; background: url(<span class="string">'../image/background.jpg'</span>); &#125;</span><br></pre></td></tr></table></figure></p><p>将你要作为背景的图片<code>background.jpg</code>放到<code>Hexo/source/images/</code>文件夹下；当然你也可以采用图片网址链接，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header &#123; background: url(<span class="string">'http://xx.xx.xx.com/hexo/image/header-backgroud.jpg'</span>); &#125;</span><br></pre></td></tr></table></figure></p><h2 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h2><p>在next/_config.yml中，修改<code>footer:</code>下面的配置，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">footer:   </span><br><span class="line">  <span class="comment">##这一段为页脚设置，footer英文意思即为页脚意思</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment">#since: 2015</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  icon: user</span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line">  copyright:</span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  powered: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    version: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Any custom text can be defined here.</span></span><br><span class="line">  <span class="comment">#custom_text: Hosted by &lt;a target="_blank" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>icon download site</title>
      <link href="/2018/09/14/icon-download-site/"/>
      <url>/2018/09/14/icon-download-site/</url>
      
        <content type="html"><![CDATA[<h2 id="icon-download-site"><a href="#icon-download-site" class="headerlink" title="icon download site"></a>icon download site</h2><p><a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">icon download site</a></p>]]></content>
      
      
      <categories>
          
          <category> 素材 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geant4 and Root Class Index</title>
      <link href="/2018/09/14/Geant4-and-Root-Class-Index/"/>
      <url>/2018/09/14/Geant4-and-Root-Class-Index/</url>
      
        <content type="html"><![CDATA[<h2 id="Geant4-Class-Index"><a href="#Geant4-Class-Index" class="headerlink" title="Geant4 Class Index"></a>Geant4 Class Index</h2><p><a href="http://www.apc.univ-paris7.fr/~franco/g4doxy4.10/html/annotated.html" target="_blank" rel="noopener">Geant4 Class Index</a></p><h2 id="Root-Class-Index"><a href="#Root-Class-Index" class="headerlink" title="Root Class Index"></a>Root Class Index</h2><p><a href="https://root.cern/doc/master/modules.html" target="_blank" rel="noopener">Root Class Index</a></p>]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geant4 </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Remote Repository UserGuide </title>
      <link href="/2018/09/13/Git-Remote-Repository-UserGuide/"/>
      <url>/2018/09/13/Git-Remote-Repository-UserGuide/</url>
      
        <content type="html"><![CDATA[<h2 id="git-remote-repository-Using"><a href="#git-remote-repository-Using" class="headerlink" title="git remote repository Using"></a>git remote repository Using</h2><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">reference site</a></p><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote  <span class="comment">#显示仓库信息</span></span><br><span class="line">$ git remote --version <span class="comment">#显示对应的克隆地址</span></span><br><span class="line">$ git remote -v   <span class="comment">#显示对应的克隆地址</span></span><br></pre></td></tr></table></figure><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add pb git://github.com/paulboone/ticgit.git  <span class="comment">#git remote add [shortname] [url]</span></span><br></pre></td></tr></table></figure><h3 id="远程仓库抓取数据"><a href="#远程仓库抓取数据" class="headerlink" title="远程仓库抓取数据"></a>远程仓库抓取数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch pb <span class="comment"># git fetch [remote-name]</span></span><br></pre></td></tr></table></figure><h3 id="推送数据到远程仓库"><a href="#推送数据到远程仓库" class="headerlink" title="推送数据到远程仓库"></a>推送数据到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master <span class="comment">#git push [remote-name] [branch-name]</span></span><br></pre></td></tr></table></figure><h3 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin  <span class="comment">#git remote show [remote-name]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The use of gnome-screenshot command</title>
      <link href="/2018/09/11/The-use-of-gnomescreenshot-command/"/>
      <url>/2018/09/11/The-use-of-gnomescreenshot-command/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please input password to read">    <label for="pass">Please input password to read</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/AU+JvZLESvrfrv+iDYaJwFN1bcBOF9lWVI1H69UGak4lHA6H0llELUk178Rs73N+ecCvhrio/evWGaJH2qh5SbeKnnfdjGzqlcIq7LfJ01fw2pZe4iWmFzrSR5Z6oSHyHqDvj4Abphl0UOLSEnLH6YOqwqnMyMW1FN5K6q41ywexZKatMWsGwa6DQVcaoWe99cDfnp44npLdtljYWdNfDEdrSEld1cUekVomNAgh5o5d5UGMT68qurl2OLcwTRFdnj5t4SH83XmAMfaJWo2L0P0MeAQAYPiENiBmpUGgy43RKAO5xboyRHYnmBBVjhrKD4fisI7s/dTnxusigGz5ezwyQ2BVQLQrhNKxyTWiNVI60Hvcc4dpsH/fph7cyFQURwWA9fmNoGX2nVrQ/jASREz/XGUlhbigNFH2my0aqx26uZ0j3y+rcjEQH+oCPbedon+wCy1T12YCt+AT4kD/Xr/FBCeTMfJMVVXbPmEPkAL0u3Jv468bPjzvRdzY81QwEx17IPW6Lm/ytD2X/fhyz4H5c5qKpaf7htc1wv77Jk7Mw6nGHHuBUTqhJNZckWIY0AbFF6o5ODjsfuV2Exnl9AgZoBiGmUC8NqkRVlKqeXJw1ZKkByHqf/khhpf4Z8750G0F8R9k0N84DQDl/4QK8etkhraYLETFXTwpQ/WpV7Om8WIv0n7PIqGglwjP8/3hcWaDfxX6mc9oiOWnR4cxZBDwDtpsMxfwZjTP5tHK0UT/M9YdMGYeuz+v+iCyw0Ff+5k9UGA7/W/5gxiBugUPcI+cXvtoKDhWOpc0BQXuwRQDCrRcb24T7+pNZVy0CcSuX6+pEqQK4eP1KTPSzEmkhiLciH1GNsFWa4mth9hBYNnCGTzCAjQd5uOcBd3PWSCXxFhX48RR91g5RrSp/yuuN01S70SsyLMikM0DhhQBRJ6Tg+AFhdY83C908chk88M7gPywnZKouukxnMAGiebLLUWHQ7P9NKNXBKAzYEcAzf+jUYR83B2391YQJOZhW33PnshWreRkVNJ+/8RI6R6MKK1Bx0lXjLLrZGvNu02Ila9YUaLv9ng/F2BP9qwAz3STgLj2FbDNhoipFHPv9ZhYNkMU93JU6f2tES8mzeLPflLcOsJsD/yGFv0PskTQ2cDNXKr/HhoAkLDe+fkCuXM6R0phZzpBBXz5cc4Vm8MmDouRVFicLOdTtNfkwQdegiMhu+YqSP7GzrbxHfFyM6FYNxkRZ0FUfIZ2NJZtHdPFlNEa3fwllQR1ebboPNvbCypj+8DKLprRtzXEFeY0K5I1EDVs535QrofWSIFEdgs7kNlV49xWnY2kEwloMRvOnG2s6d2gTmk1Zd+CWuTwQomumDzi4JLuoOVmuKI6h3il6ronTnkqULZOHvaKomvCX+nrdJRjwIx6W64q6L9BwPoXXIRURoWsHDR7o8wjqMt96tW1Wp2iGqOxzf4CjOSPXkDn7hkj6ULkoCyrDYpErIV8+JGpKVfZtba7yyC9+5wH5VtsuCEfjYSvInuG9gVmMEdW5KUN8dmzvT8o3w+LeFDbZnmhav8R6WBk/Xpkq959TJN8du+xAYurkBNwoNQ/A38IRHmBRZL/zB4HgZhPfjPX2GdaomcRn11pDJaDDEnEXongK4oFdInQUOO+LWTcBKKNJt2+mkrHsEcPU2f0NOkwfECTj7DliNmi1bswggjS8NOQzuEDDcVM3vmPwD8Ut25Vv/OrgoV8tCCIfEOoX4HKENIagDujgnYtMAHGNV1quturynNWQAUQpEARZk6dGyZhZ6D8o5PPgtVtSi9UYQfA1pBzKTv0t6qERN2wyldXVO7AVCsb+QfMZou5tiFww/t6F48OzCc+u2YmRQXhN3uOImyzzhzSJ/IZzUWGkrPp7gVdOYV2Q37LqMu5XV13PPY8UfKZAr2ipJWvUAjTxTjbJeS4UQ8C4w72SjXdHtghcV02Xq8gnazCR+M/7clyNX3QGeaSc1B9MPGm0S1RDCy9qHPuf9K+sH3I1V7mHFSnaAU60LKmxk0fIvbTgT0A+Z9o0qRc+CXNbod8SoDkTWCp+i+5IyHgwvesPWXBNfUdbGYYoF/e5ds+vCgJgqHVe2T4DN6BGW7tjNW+bS91+/pmFpQAl46S/UhXIBOca6nq+nSy6BbrBQUtLkTa5qqEDyPCgGPXLMp5VXr1uDPYApetSZG0fq+96rAfJJggp69g4+CGO3w/lrYuWonQE7yYgIqijfBpfgr8onxlVMx6xw4M+U++Z4xbaZpbGUCi0W/Y7S82TyDsae7dzalDLaV6LFnYB/qaUMqr6oyBN6Voi1QDS3SHX8EIIeyLQT+jdma4bH1Zy+qM6+Ac3XpljRr+/FWW2miSPDN9SOGFE4j6oJqruR9bj5yKpdNjr/4fNVbLfTIDF0PhH2KIa/lgWUu4ZfDr1VAAFiCw9mkhXXemTOmlIgPDozUfTqKe3ROGkUXJJv/U+mhKJYGLc++SGZjUouHbUqFNre/ZWrIt3oAm7EIhWvSrKDkaxFvm4yugu6ZNRjZnesSRm+psIK+1NkTAL2Sh7xVCjPX0+eUlkiB9iQNvQAKLHZggpZGe0XMty++gFNfTjgcGAEzUcmQ7qcdY6IBmkhgIIAZXWhegRWZeNDQg738V/ql3UUsUYk7a0eFXno+p+X4WPcc15oEzWyDMoucRVE5qTZ7HobIFK43qlT9dZBUwhHr09rxZuNwFkH7WLf0bOYUBy3Z9SwJVHfuV7oYXVU2GM9B9TswZC9rJ9U5w9wHqt/QuZ/n6gyvEh+hFTrzdDtVmYkO6NAU/Z5AsAqQaHgWcHUvNOOMQTqnn5hojGK8vYNbDhnSXDJin70pZTZFqm4F883PVognEDfY3Nbf1D4WOnCOh5yhh2I9ZTcZyCtIQtP4lz4mKJu5p7hEc82d0Tkzx6A9fhxr6CVe6noABPu3n/W+VOnkdoMUwakEY8GzG+XtE3ZFCM9JhrZ1RLpz5eDHZxW71tj/+JqdP2C5ZBUcDKNzruq6byVI7OVyc27t0QX/p84H7TYvxbKw3xr8cqKI2srvl/bw8rxAzB7bRtk1JpWITN9z21goK1Na9e9+Wy8mpmlDAzLm8agAE9plu7NTxxTOyk5d0WxLzi2FDiOSxStngIXeqHgd71oW/QaRjcMlSbUmWLONYSpnpkxX7y0wAzvas66EFpB66nZ2+eLXtk8Lz1HI94D9fib5dixjk+K+AKLEbohqLT6ysYpmtBL4Yorosbd7NFYI4yzXYSxD7Lc0Y8cnH83pUNb5tiwPpPAznPQUXutaM8TYg/nw3MHZVDKim75PF/8IBq1OfaSCpvTFg/nXSx2new6jw9wQ80yyuv9rQtNmR5/lAEs1BrzbvpDyCo4WivZqd4khvV4OJ1sTdDQUIuMzpS6DWxWcix0NqLm6q7Wm/bmxMepocJT7qTDbMxtw1pNKt9L14ix0Y71bepKD+b3uVG2DwDEV5sTCMKVjUrM9vtsm2ud49xWjxTNdi+0yal+uk3020JnRSGSw4tXOKmEKjbj1aMZGr9fQd0CO04c9AbI7TXpnWOXnb9EKODK5iT+lZnir3CRwkQCjJX/HNdEi0bwABiIfBEMxlwfEbDOZVPwLLND19RtiAJNU8TPK5iEny1XeS67D/SJhsStlGP3ACpDr9lNQlxCMkY9eyMrRhjDZ4I9dr/hj7DnfiDx+WYknnyUW739UxJiwmcYw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> linux tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geant4DetectorConstruction</title>
      <link href="/2018/09/11/geant4DetectorConstruction/"/>
      <url>/2018/09/11/geant4DetectorConstruction/</url>
      
        <content type="html"><![CDATA[<h2 id="geant-detector-construction"><a href="#geant-detector-construction" class="headerlink" title="geant detector construction"></a>geant detector construction</h2><ol><li>几何旋转符合<code>左手法则</code>及RotationMatrix的使用<br>经过验证geant4中的rotate符合<code>左手法则</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">G4RotationMatrix *rot=new G4RotationMatrix;</span><br><span class="line">rot-&gt;rotateX(90*degree);</span><br><span class="line">rot-&gt;rotateY(90*degree);</span><br><span class="line">rot-&gt;rotateZ(90*degree);</span><br></pre></td></tr></table></figure><p>注意，再次对rot重复赋值无效，如对上述代码再作如下操作<code>rot-&gt;rotateX(180*degree)</code>,该操作将无效，不会改变之前的rot；<br>那么，要对rot再次赋值该怎么办呢？如下：只需在再次赋值前加<code>rot =new G4RotationMatrix</code>即可；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">  G4RotationMatrix* rotationMatrix_X = new G4RotationMatrix;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(G4int x_col_num = 0; x_col_num &lt;=NBD_colNb; x_col_num++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x_col_num==0)&#123;  // the center colume</span><br><span class="line">      NBDx = NBDx0;</span><br><span class="line">      <span class="keyword">for</span>(G4int y_row_num = 0; y_row_num &lt;=NBD_rowNb; y_row_num++ )&#123;</span><br><span class="line">// NBDx = NBDx0;</span><br><span class="line">NBDy = NBDy0+R*sin(y_row_num*theta);</span><br><span class="line">NBDz = NBDz0+R*(1-cos(y_row_num*theta));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(y_row_num==0)&#123;</span><br><span class="line">  // center position</span><br><span class="line">  rotationMatrix_X = new G4RotationMatrix;</span><br><span class="line">  rotationMatrix_X-&gt;rotateX(y_row_num*theta);</span><br><span class="line"></span><br><span class="line">  new G4PVPlacement(rotationMatrix_X,                      //no rotation</span><br><span class="line">    G4ThreeVector(NBDx,NBDy,NBDz),       //at (0,0,0)</span><br><span class="line">    logicAssembleNBD,                    //its logical volume</span><br><span class="line">    <span class="string">"AssembleNBD"</span>,         //its name</span><br><span class="line">    expHall_logV,          //its mother  volume</span><br><span class="line">    <span class="literal">false</span>,                 //no boolean operation</span><br><span class="line">    0,                     //copy number</span><br><span class="line">    <span class="literal">true</span>);                    //overlaps checking    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  //+y++</span><br><span class="line">  rotationMatrix_X = new G4RotationMatrix;</span><br><span class="line">  rotationMatrix_X-&gt;rotateX(-y_row_num*theta);</span><br><span class="line"></span><br><span class="line">  new G4PVPlacement(rotationMatrix_X,                      //no rotation</span><br><span class="line">    G4ThreeVector(NBDx,NBDy,NBDz),       //at (0,0,0)</span><br><span class="line">    logicAssembleNBD,                    //its logical volume</span><br><span class="line">    <span class="string">"AssembleNBD"</span>,         //its name</span><br><span class="line">    expHall_logV,          //its mother  volume</span><br><span class="line">    <span class="literal">false</span>,                 //no boolean operation</span><br><span class="line">    0,                     //copy number</span><br><span class="line">    <span class="literal">true</span>);               // overlaps checking </span><br><span class="line">  //-y++</span><br><span class="line">  rotationMatrix_X = new G4RotationMatrix;</span><br><span class="line">  rotationMatrix_X-&gt;rotateX(y_row_num*theta);</span><br><span class="line">  new G4PVPlacement(rotationMatrix_X,                      //no rotation</span><br><span class="line">    G4ThreeVector(NBDx,-NBDy,NBDz),       //at (0,0,0)</span><br><span class="line">    logicAssembleNBD,                    //its logical volume</span><br><span class="line">    <span class="string">"AssembleNBD"</span>,         //its name</span><br><span class="line">    expHall_logV,          //its mother  volume</span><br><span class="line">    <span class="literal">false</span>,                 //no boolean operation</span><br><span class="line">    0,                     //copy number</span><br><span class="line">    <span class="literal">true</span>);               // overlaps checking    </span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><ol start="2"><li>G4VParameterisation()的使用</li></ol><ul><li><code>ComputeTransformation</code> defines where one of the copies is placed</li><li><code>ComputeDimensions</code> defines the size of one copy, and a constructor that initializes any member variables that are required.</li></ul><p>G4VParameterisation的具体应用可参看Basics/B2/B2b</p>]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geant4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G4Color选项</title>
      <link href="/2018/09/09/G4Color%E9%80%89%E9%A1%B9/"/>
      <url>/2018/09/09/G4Color%E9%80%89%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="颜色的配置"><a href="#颜色的配置" class="headerlink" title="颜色的配置"></a>颜色的配置</h2><p>Geant4中的颜色配置由红、绿、蓝、是否透明四个构成；red、green、blue、alpha(opacity/opaque)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">G4Colour::G4Colour ( G4double  r = 1.0,</span><br><span class="line">     G4double  g = 1.0,</span><br><span class="line">     G4double  b = 1.0,</span><br><span class="line">                     G4double  a = 1.0);</span><br><span class="line">                 //0&lt;=red, green, blue &lt;= 1.0</span><br></pre></td></tr></table></figure></p><h2 id="颜色的实例化应用"><a href="#颜色的实例化应用" class="headerlink" title="颜色的实例化应用"></a>颜色的实例化应用</h2><p>1.颜色配置实例化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">G4Colour  white  ();  //white</span><br><span class="line">G4Colour  white  (1.0,1.0,1.0);  //white</span><br><span class="line">G4Colour  gray   (0.5,0.5,0.5);  //gray</span><br><span class="line">G4Colour  black  (0.0,0.0,0.0); //black</span><br><span class="line">G4Colour  red    (1.0,0.0,0.0);  //red</span><br><span class="line">G4Colour  green  (0.0,1.0,0.0);  //green</span><br><span class="line">G4Colour  blue   (0.0,0.0,1.0);  //blue</span><br><span class="line">G4Colour  cyan   (0.0,1.0,1.0); //cyan</span><br><span class="line">G4Colour  magenta(1.0,0.0,1.0);  //magenta</span><br><span class="line">G4Colour  yellow (1.0,1.0,0.0);  //yellow</span><br></pre></td></tr></table></figure></p><p>example<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G4VisAttributes* Assemble_VisAtt= new G4VisAttributes(G4Colour(0.0,0.0,1.0));//blue</span><br></pre></td></tr></table></figure></p><p>2.静态公用数据函数实例化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static const G4Colour&amp; White   ();</span><br><span class="line">static const G4Colour&amp; Gray    ();</span><br><span class="line">static const G4Colour&amp; Grey    ();</span><br><span class="line">static const G4Colour&amp; Black   ();</span><br><span class="line">static const G4Colour&amp; Red     ();</span><br><span class="line">static const G4Colour&amp; Green   ();</span><br><span class="line">static const G4Colour&amp; Blue    ();</span><br><span class="line">static const G4Colour&amp; Cyan    ();</span><br><span class="line">static const G4Colour&amp; Magenta ();</span><br><span class="line">static const G4Colour&amp; Yellow  ();</span><br></pre></td></tr></table></figure></p><p>example<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G4Colour myRed(G4Colour::Red());</span><br></pre></td></tr></table></figure></p><p>实例化Colour对象后，可以采用如下方式获得函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G4double G4Colour::GetRed   () const;</span><br><span class="line">G4double G4Colour::GetGreen () const;</span><br><span class="line">G4double G4Colour::GetBlue  () const;</span><br></pre></td></tr></table></figure></p><h2 id="Colour-Map的应用"><a href="#Colour-Map的应用" class="headerlink" title="Colour Map的应用"></a>Colour Map的应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">G4StringG4Colour</span><br><span class="line">---------------------------------------</span><br><span class="line">whiteG4Colour::White()</span><br><span class="line">grayG4Colour::Gray()</span><br><span class="line">greyG4Colour::Grey()</span><br><span class="line">blackG4Colour::Black()</span><br><span class="line">redG4Colour::Red()</span><br><span class="line">greenG4Colour::Green()</span><br><span class="line">blueG4Colour::Blue()</span><br><span class="line">cyanG4Colour::Cyan()</span><br><span class="line">magentaG4Colour::Magenta ()</span><br><span class="line">yellowG4Colour::Yellow ()</span><br></pre></td></tr></table></figure><p>Colours的检索可以采用如下方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool G4Colour::GetColour(const G4String&amp; key, G4Colour&amp; result)</span><br></pre></td></tr></table></figure></p><p>example<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">G4Colour myColour(G4Colour::Black());</span><br><span class="line"><span class="keyword">if</span> (G4Colour::GetColour(<span class="string">"red"</span>, myColour)) &#123;</span><br><span class="line">// Successfully retrieved colour <span class="string">"red"</span>. myColour is now red</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">// Colour did not exist <span class="keyword">in</span> map. myColour is still black</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Geant4及Root应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Geant4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add menubar and search function to hexo blog</title>
      <link href="/2018/09/09/How-to-add-menubar-and-search-function-to-blog-with-hexo/"/>
      <url>/2018/09/09/How-to-add-menubar-and-search-function-to-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="Add-Menubar"><a href="#Add-Menubar" class="headerlink" title="Add Menubar"></a>Add Menubar</h2><p>In the theme folder, we can find the following scripts in the _config.yml file.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimeter is the target link.</span></span><br><span class="line"><span class="comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span></span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line">menu_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>The default menubars are home and archives. I want to add tags, categories and about to menubar. The problems appear when I only note off the options in the above scripts.</p><p>After investigation about this problem, I find the ansower in this site  <a href="http://www.360doc.com/content/18/0521/13/14715637_755685918.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/18/0521/13/14715637_755685918.shtml</a> <code>method one to cite website</code></p><p><a href="http://www.360doc.com/content/18/0521/13/14715637_755685918.shtml" target="_blank" rel="noopener">this site</a>  <code>method two to cite website</code></p><p>Actually, we should add folder with commond <code>hexo new page  menubar_name</code>, then corresponding folders will appear in the source folder which is the site configure source folder. Then add configure information in the correspongding index.md.<br>Take tags for example.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>We will see follow information in index.md.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-09-09 13:34:49</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>Then we add <code>type: &quot;tags&quot;</code> to the index.md<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-09-09 13:34:49</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>Similar methods are used to add categories and about to menubar.</p><h2 id="Add-local-search-function-to-menubar"><a href="#Add-local-search-function-to-menubar" class="headerlink" title="Add local search function to menubar"></a>Add local search function to menubar</h2><ol><li>install <code>hexo-generator-search</code>, hexo-theme-next search function depend on this package.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><ol start="2"><li>active the local search configure in theme configure file <code>_config.yml</code>.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#false modified by hubery lee @2018/9/9</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中插入图片测试</title>
      <link href="/2018/09/01/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/09/01/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-站点配置"><a href="#hexo-站点配置" class="headerlink" title="hexo 站点配置"></a>hexo 站点配置</h2><p>设置_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br><span class="line">$ npm install https://github.com/CodeFalling/hexo-asset-image -- save  <span class="comment">#该方法安装测试成功</span></span><br></pre></td></tr></table></figure><h2 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"newblog"</span></span><br><span class="line"> </span><br><span class="line">会有newblog.md和newblog文件夹，将需要引用的图片放到文件夹内</span><br></pre></td></tr></table></figure><p>在newblog.md中图片的引用</p><p>1.标签引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ &#123;% asset_path slug %&#125;</span><br><span class="line">$ &#123;% asset_img slug [title] %&#125;</span><br><span class="line">$ &#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path gitProcess.png %&#125;</span><br><span class="line">&#123;% asset_img gitProcess.png 第二种方法 %&#125;</span><br><span class="line">&#123;% asset_link  https://image.baidu.com/search/detail?ct=503316480&amp;z=&amp;tn=baiduimagedetail&amp;ipn=d&amp;word=%E7%8C%AB%E5%A4%B4%E9%B9%B0&amp;step_word=&amp;ie=utf-8&amp;in=&amp;cl=2&amp;lm=-1&amp;st=-1&amp;cs=2028628767,61876418&amp;os=4058183028,3413382511&amp;pn=0&amp;rn=1&amp;di=196345561830&amp;ln=1940&amp;fr=&amp;fmq=1535807535286_R&amp;fm=&amp;ic=0&amp;s=undefined&amp;se=&amp;sme=&amp;tab=0&amp;width=&amp;height=&amp;face=undefined&amp;is=0,0&amp;istype=2&amp;ist=&amp;jit=&amp;bdtype=0&amp;pi=0&amp;gsm=0&amp;objurl=http%3A%2F%2Fimg5q.duitang.com%2Fuploads%2Fblog%2F201502%2F08%2F20150208122643_s2BMS.jpeg&amp;rpstart=0&amp;rpnum=0&amp;adpicid=0&amp;ctd=1535807540714^3_1354X569%1 owl %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% asset_link  gitProcess.png 第三种方法 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path gitProcess.png %&#125;</span><br><span class="line">&#123;% asset_img gitProcess.png 第二种方法 %&#125;</span><br><span class="line">&#123;% asset_link  https://image.baidu.com/search/detail?ct=503316480&amp;z=&amp;tn=baiduimagedetail&amp;ipn=d&amp;word=%E7%8C%AB%E5%A4%B4%E9%B9%B0&amp;step_word=&amp;ie=utf-8&amp;<span class="keyword">in</span>=&amp;cl=2&amp;lm=-1&amp;st=-1&amp;cs=2028628767,61876418&amp;os=4058183028,3413382511&amp;pn=0&amp;rn=1&amp;di=196345561830&amp;ln=1940&amp;fr=&amp;fmq=1535807535286_R&amp;fm=&amp;ic=0&amp;s=undefined&amp;se=&amp;sme=&amp;tab=0&amp;width=&amp;height=&amp;face=undefined&amp;is=0,0&amp;istype=2&amp;ist=&amp;jit=&amp;bdtype=0&amp;pi=0&amp;gsm=0&amp;objurl=http%3A%2F%2Fimg5q.duitang.com%2Fuploads%2Fblog%2F201502%2F08%2F20150208122643_s2BMS.jpeg&amp;rpstart=0&amp;rpnum=0&amp;adpicid=0&amp;ctd=1535807540714^3_1354X569%1 owl %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% asset_link  gitProcess.png 第三种方法 %&#125;</span><br></pre></td></tr></table></figure><p>2.利用markdown</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明](XXX/图片.jpg)  <span class="comment">#XXX为文件夹名</span></span><br></pre></td></tr></table></figure><p><img src="/2018/09/01/图片测试/gitProcess.png" alt="图片测试1"><br><img src="/2018/09/01/图片测试/gitProcess.png" alt="图片测试2"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![图片测试1](图片测试/gitProcess.png)</span><br><span class="line">![图片测试2](gitProcess.png)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git简易使用笔记</title>
      <link href="/2018/09/01/GitUseGuide/"/>
      <url>/2018/09/01/GitUseGuide/</url>
      
        <content type="html"><![CDATA[<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>采用git init 在目录创建新的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir newrepository  <span class="comment">#</span></span><br><span class="line">$ <span class="built_in">cd</span> newrepository</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>或者直接采用 git init 仓库名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init newrepository</span><br></pre></td></tr></table></figure><h2 id="软件仓库下载"><a href="#软件仓库下载" class="headerlink" title="软件仓库下载"></a>软件仓库下载</h2><p>下载仓库 git clone 拷贝到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ get <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure></p><p>例如，从我的github上下载代码到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ get <span class="built_in">clone</span> https://github.com/Hubery-Lee/LeeEmacs-setting</span><br></pre></td></tr></table></figure></p><h2 id="软件仓库的快照"><a href="#软件仓库的快照" class="headerlink" title="软件仓库的快照"></a>软件仓库的快照</h2><h3 id="git的日常使用"><a href="#git的日常使用" class="headerlink" title="git的日常使用"></a>git的日常使用</h3><p>git 的日常使用过程</p><img src="/2018/09/01/GitUseGuide/09/01/GitUseGuide/1.jpg" title="日常使用原理"><p>git add 命令可将文件添加到缓存()<br>git status 查看添加到缓存的文件状态 -s 简短结果输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ touch README</span><br><span class="line">$ touch hello.php</span><br><span class="line">$ ls</span><br><span class="line">README        hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">?? README</span><br><span class="line">?? hello.php</span><br><span class="line"></span><br><span class="line">$ git add README hello.php </span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ </span><br><span class="line"></span><br><span class="line">在 README 添加以下内容：<span class="comment"># Runoob Git 测试，然后保存退出。</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"# Runoob Git"</span>&gt;&gt;README </span><br><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">A  hello.php</span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br></pre></td></tr></table></figure><p>执行 git diff 来查看执行 git status 的结果的详细信息。</p><p>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p><pre><code>尚未缓存的改动：git diff查看已缓存的改动： git diff --cached查看已缓存的与未缓存的所有改动：git diff HEAD显示摘要而非整个 diff：git diff --stat</code></pre><p>git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。</p><p>接下来我们来查看下 git diff –cached 的执行效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">在 hello.php 文件中输入以下内容：</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'菜鸟教程：www.runoob.com'</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">AM hello.php</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/hello.php b/hello.php</span><br><span class="line">index e69de29..69b5711 100644</span><br><span class="line">--- a/hello.php</span><br><span class="line">+++ b/hello.php</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+&lt;?php</span><br><span class="line">+<span class="built_in">echo</span> <span class="string">'菜鸟教程：www.runoob.com'</span>;</span><br><span class="line">+?&gt;</span><br><span class="line"></span><br><span class="line">$ git add hello.php </span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ git diff --cached</span><br><span class="line">diff --git a/README b/README</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..8f87495</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/README</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+<span class="comment"># Runoob Git 测试</span></span><br><span class="line">diff --git a/hello.php b/hello.php</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..69b5711</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/hello.php</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+&lt;?php</span><br><span class="line">+<span class="built_in">echo</span> <span class="string">'菜鸟教程：www.runoob.com'</span>;</span><br><span class="line">+?&gt;</span><br></pre></td></tr></table></figure><p>git commit 将缓存区内容添加到仓库中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 配置用户名和邮箱地址</span><br><span class="line">$ git config --global user.name <span class="string">'runoob'</span></span><br><span class="line">$ git config --global user.email <span class="built_in">test</span>@runoob.com</span><br></pre></td></tr></table></figure></p><p>提交缓存到仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'第一次版本提交'</span></span><br><span class="line">[master (root-commit) d32cf1f] 第一次版本提交</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"> create mode 100644 hello.php</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure></p><p>git reset HEAD 命令用于取消已缓存的内容。<br>同时修改README和hello.php,然后撤销hello.php的缓存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line"> M hello.php</span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line">M  hello.pp</span><br><span class="line">$ git reset HEAD hello.php </span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M    hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line"> M hello.php</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">'修改'</span></span><br><span class="line">[master f50cfda] 修改</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">$ git status -s</span><br><span class="line"> M hello.php</span><br></pre></td></tr></table></figure></p><p>仍然可以再次提交hello.php修改的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">'修改 hello.php 文件'</span></span><br><span class="line">[master 760f74d] 修改 hello.php 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure></p><p>简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。</p><p>git rm<br>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;file&gt;</span><br><span class="line">$ git rm -f  &lt;file&gt;</span><br><span class="line">$ git rm -r &lt;file&gt;</span><br><span class="line">$ git rm --cached &lt;file&gt;</span><br><span class="line">类似有git mv 移动和重命名</span><br><span class="line">$ git mv README  README.md</span><br></pre></td></tr></table></figure><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作</p><h3 id="git中tag和branch的使用"><a href="#git中tag和branch的使用" class="headerlink" title="git中tag和branch的使用"></a>git中tag和branch的使用</h3><img src="/2018/09/01/GitUseGuide/09/01/GitUseGuide/2.png" title="tag和branch"><p>创建分支、列出分支、切换分支、删除分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing <span class="comment">#创建testing分支</span></span><br><span class="line">$ git branch   <span class="comment">#列出分支</span></span><br><span class="line">* master</span><br><span class="line">  testing</span><br><span class="line"></span><br><span class="line">$ git checkout testing</span><br><span class="line">Switched to branch <span class="string">'testing'</span></span><br><span class="line"></span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line"></span><br><span class="line">$ git checkout -b newtest  <span class="comment">#创建newtest分支并切换到该分支</span></span><br><span class="line">Switched to a new branch <span class="string">'newtest'</span></span><br><span class="line"></span><br><span class="line">$ git branch -d testing  <span class="comment">#删除testing分支</span></span><br><span class="line">Deleted branch testing (was 85fc7e7).</span><br><span class="line"></span><br><span class="line">$ git branch  </span><br><span class="line">* master</span><br><span class="line">  newtest</span><br><span class="line"></span><br><span class="line">$ git merge newtest     <span class="comment">#将newtest分支合并到master分支</span></span><br><span class="line">Updating 2e082b7..556f0a0</span><br><span class="line">Fast-forward</span><br><span class="line"> test2.txt | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test2.txt</span><br></pre></td></tr></table></figure></p><p>当同时记录到master的修改和branch分支的修改时，会出现合并分支冲突<br>手动修改冲突部分<br>采用git add 告诉git文件冲突已经解决；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ git merge change_site</span><br><span class="line">Auto-merging test.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> test.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">$ cat test.txt </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">runoob.com</span><br><span class="line">新增加一行</span><br><span class="line">=======</span><br><span class="line">www.runoob.com</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site</span><br><span class="line"></span><br><span class="line">$ vim test.txt </span><br><span class="line">$ cat test.txt </span><br><span class="line">www.runoob.com</span><br><span class="line">新增加一行</span><br><span class="line">$ git diff</span><br><span class="line">diff --cc test.txt</span><br><span class="line">index f84c2a4,bccb7c2..0000000</span><br><span class="line">--- a/test.txt</span><br><span class="line">+++ b/test.txt</span><br><span class="line">@@@ -1,2 -1,1 +1,2 @@@</span><br><span class="line">- runoob.com</span><br><span class="line">+ www.runoob.com</span><br><span class="line"> +新增加一行</span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">UU test.txt</span><br><span class="line">$ git add test.txt </span><br><span class="line">$ git status -s</span><br><span class="line">M  test.txt</span><br><span class="line">$ git commit</span><br><span class="line">[master 88afe0e] Merge branch <span class="string">'change_site'</span></span><br></pre></td></tr></table></figure></p><p>查看提交历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span>  <span class="comment">#详细提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline  <span class="comment">#简洁提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --graph  <span class="comment">#--graph开启了拓扑图选项</span></span><br><span class="line">$ git <span class="built_in">log</span> --reverse --oneline <span class="comment">#用 '--reverse'参数来逆向显示所有日志。</span></span><br><span class="line">$ git <span class="built_in">log</span> --author=Linus --oneline -5 <span class="comment">#--author查找指定用户提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges<span class="comment">#指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after --no-merges 选项以隐藏合并提交</span></span><br></pre></td></tr></table></figure></p><p>标签<br>写一句标签注解，就像你给提交写注解一样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0 </span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph  <span class="comment">#执行 git log --decorate 时，可以看到标签</span></span><br><span class="line">$ git tag -a v0.9 85fc7e7       <span class="comment">#给提交代码85fc7e7追加标签</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph</span><br><span class="line">*   88afe0e (HEAD, tag: v1.0, master) Merge branch <span class="string">'change_site'</span></span><br><span class="line">|\  </span><br><span class="line">| * d7e7346 (change_site) changed the site</span><br><span class="line">* | 14b4dca 新增加一行</span><br><span class="line">|/  </span><br><span class="line">* 556f0a0 removed test2.txt</span><br><span class="line">* 2e082b7 add test2.txt</span><br><span class="line">* 048598f add test.txt</span><br><span class="line">* 85fc7e7 (tag: v0.9) <span class="built_in">test</span> comment from runoob.com</span><br><span class="line"></span><br><span class="line">$ git tag  <span class="comment">#查看所有标签</span></span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br><span class="line"></span><br><span class="line">$ git tag -a &lt;tagname&gt; -m <span class="string">"runoob.com标签"</span>  <span class="comment">#指定标签信息命令</span></span><br><span class="line">$ git tag -s &lt;tagname&gt; -m <span class="string">"runoob.com标签"</span>  <span class="comment">#PGP签名标签命令</span></span><br></pre></td></tr></table></figure></p><h2 id="远程软件仓库的提取"><a href="#远程软件仓库的提取" class="headerlink" title="远程软件仓库的提取"></a>远程软件仓库的提取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git remote   <span class="comment">#查看远程仓库</span></span><br><span class="line">origin</span><br><span class="line">$ git remote -v  <span class="comment">#-v 参数，可以看到每个别名的实际链接地址。</span></span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (push)</span><br><span class="line"></span><br><span class="line">$ git fetch [<span class="built_in">alias</span>] <span class="comment">#从远程仓库下载分支和数据</span></span><br><span class="line">$ git fetch origin  <span class="comment">#从远程仓库下载origin分支和数据</span></span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From github.com:tianqixin/runoob-git-test</span><br><span class="line">   0205aab..febd8ed  master     -&gt; origin/master</span><br></pre></td></tr></table></figure><h2 id="远程软件仓库的上传"><a href="#远程软件仓库的上传" class="headerlink" title="远程软件仓库的上传"></a>远程软件仓库的上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git merge [<span class="built_in">alias</span>]/[branch] <span class="comment">#以将服务器上的任何更新合并到你的当前分支</span></span><br><span class="line">$ git merge origin/master  <span class="comment">#从远端仓库提取数据并尝试合并到当前分支</span></span><br><span class="line">Updating 0205aab..febd8ed</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">$ git push [<span class="built_in">alias</span>] [branch] <span class="comment">#推送你的新分支与数据到某个远端仓库</span></span><br><span class="line">$ git push origin master    <span class="comment"># 推送到 Github</span></span><br><span class="line"></span><br><span class="line">git remote rm  [<span class="built_in">alias</span>]</span><br><span class="line">git remote mv [aliasA] [aliasB]</span><br></pre></td></tr></table></figure><h2 id="获取软件仓库更改历史"><a href="#获取软件仓库更改历史" class="headerlink" title="获取软件仓库更改历史"></a>获取软件仓库更改历史</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">$ git status -s</span><br><span class="line">$ git diff </span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git <span class="built_in">log</span>  <span class="comment">#详细提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline  <span class="comment">#简洁提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --graph  <span class="comment">#--graph开启了拓扑图选项</span></span><br><span class="line">$ git <span class="built_in">log</span> --reverse --oneline <span class="comment">#用 '--reverse'参数来逆向显示所有日志。</span></span><br><span class="line">$ git <span class="built_in">log</span> --author=Linus --oneline -5 <span class="comment">#--author查找指定用户提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges<span class="comment">#指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after --no-merges 选项以隐藏合并提交</span></span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">$ git tag</span><br><span class="line">$ git remote</span><br></pre></td></tr></table></figure><h2 id="回滚到软件仓库的历史版本"><a href="#回滚到软件仓库的历史版本" class="headerlink" title="回滚到软件仓库的历史版本"></a>回滚到软件仓库的历史版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reset </span><br><span class="line">$ git reset HEAD [file]</span><br><span class="line">$ git reset --hard &lt;target_commit_id&gt;</span><br><span class="line">$ git reset --soft origin/<span class="built_in">source</span> 命令（<span class="built_in">source</span> 分支）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo简易使用笔记</title>
      <link href="/2018/09/01/hexo%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/01/hexo%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure><h2 id="hexo发布博客预览"><a href="#hexo发布博客预览" class="headerlink" title="hexo发布博客预览"></a>hexo发布博客预览</h2><p>本地预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br></pre></td></tr></table></figure><p>然后，在浏览器中打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>发布到github绑定的个人博客网页上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure><p>比如，我发布博客后，就直接可以采用个人网络域名访问 <a href="http://lihui-snippets.cn/">http://lihui-snippets.cn/</a> </p><p>具体github+hexo如何搭建个人博客教程可以百度以下；我觉得这篇博客写的比较好 <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeeEmacs-setting</title>
      <link href="/2018/09/01/LeeEmacs-setting/"/>
      <url>/2018/09/01/LeeEmacs-setting/</url>
      
        <content type="html"><![CDATA[<h2 id="模块功能yasnippet"><a href="#模块功能yasnippet" class="headerlink" title="模块功能yasnippet"></a>模块功能yasnippet</h2><ol><li>下载yasnippet安葬包，加压到~/.emacs.d/plugins目录下</li><li>在～/.emacs文件中配置yasnippet</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">;; add yasnippet plugin </span><br><span class="line">(add-to-list <span class="string">'load-path</span></span><br><span class="line"><span class="string">              "~/.emacs.d/plugins/yasnippet")</span></span><br><span class="line"><span class="string">(require '</span>yasnippet)</span><br><span class="line">(yas-global-mode 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;;代码折叠</span><br><span class="line">(load-library <span class="string">"hideshow"</span>)</span><br><span class="line">(add-hook <span class="string">'java-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'perl-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'php-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'emacs-lisp-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'c++-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'c-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'matlab-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'fortran-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'f90-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'markdown-mode-hook '</span>hs-minor-mode)</span><br><span class="line">(add-hook <span class="string">'org-mode-hook '</span>hs-minor-mode)</span><br></pre></td></tr></table></figure><h2 id="文件头个人信息设置——header2-el"><a href="#文件头个人信息设置——header2-el" class="headerlink" title="文件头个人信息设置——header2.el"></a>文件头个人信息设置——header2.el</h2><ol><li>wiki 下载header2.el</li><li>将header2.el 放到~/.emacs.d/plugins文件夹下；</li><li>在～/.emacs文件中配置个人信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">;;====================info of user====================</span><br><span class="line">;;********************header**************************</span><br><span class="line">;;(load-file <span class="string">"~/.emacs.d/header2.el"</span>)</span><br><span class="line">(add-to-list <span class="string">'load-path "~/.emacs.d/plugins" )</span></span><br><span class="line"><span class="string">;; 设置文件头中的姓名</span></span><br><span class="line"><span class="string">(require '</span>header2)</span><br><span class="line">(setq user-full-name <span class="string">"Li Hui"</span>)</span><br><span class="line"></span><br><span class="line">;; 设置邮箱</span><br><span class="line">(setq user-email-address <span class="string">"h*****@126.com"</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">;; 设置每次保存时要更新的项目</span><br><span class="line">(<span class="built_in">autoload</span> <span class="string">'auto-update-file-header "header2")</span></span><br><span class="line"><span class="string">(add-hook '</span>write-file-hooks <span class="string">'auto-update-file-header)</span></span><br><span class="line"><span class="string">(autoload '</span>auto-make-header <span class="string">"header2"</span>)</span><br><span class="line">(add-hook <span class="string">'emacs-lisp-mode-hook '</span>auto-make-header)</span><br><span class="line">(add-hook <span class="string">'c-mode-common-hook   '</span>auto-make-header) </span><br><span class="line">(add-hook <span class="string">'c++-mode-common-hook   '</span>auto-make-header)</span><br><span class="line">(add-hook <span class="string">'text-mode-hook   '</span>auto-make-header)</span><br><span class="line"></span><br><span class="line">;;(add-hook <span class="string">'make-header-hook '</span>header-shell nil t)</span><br></pre></td></tr></table></figure><h2 id="自动补全-auto-complete"><a href="#自动补全-auto-complete" class="headerlink" title="自动补全 auto-complete"></a>自动补全 auto-complete</h2><p>经过尝试，直接解压到~/.emacs.d/plugins文件夹然后make 和make install 然后在.emacs文件配置导入auto-complete插件，但并不能实现自动补全功能。但也没有报错；我认为可能是由于可能式auto-complete没有开启的缘故；</p><ol><li>检测auto-complete有没有安装成功的方法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装完后，重启emacs然后输入ac，若出现可选的自动补全选项，那么说明已经安装成功了；</span><br></pre></td></tr></table></figure><ol start="2"><li>auto-complete的安装方法——第二种安装成功<br>（1）传统方法是采用解压到~/.emacs.d/plugins,然后make和make install，再在.emacs中进行配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(add-to-list <span class="string">'load-path "/home/hubery_lee/.emacs.d/plugins/auto-complete")</span></span><br><span class="line"><span class="string">(require '</span>auto-complete-config)</span><br><span class="line">(add-to-list <span class="string">'ac-dictionary-directories "/home/hubery_lee/.emacs.d/plugins/auto-complete/ac-dict")</span></span><br><span class="line"><span class="string">(ac-config-default)</span></span><br></pre></td></tr></table></figure><p>（2）通过MELPA或MELPA Stable的package.el安装auto-complete.el；<br>参考github这个开放者介绍的方法进行安装 <a href="https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md" target="_blank" rel="noopener">https://github.com/auto-complete/auto-complete/blob/master/doc/manual.md</a></p><p>首先，添加melpa或melpa-stable的package库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(require <span class="string">'package)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; If you want to use latest version</span></span><br><span class="line"><span class="string">(add-to-list '</span>package-archives <span class="string">'("melpa" . "https://melpa.org/packages/"))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; If you want to use last tagged version</span></span><br><span class="line"><span class="string">(add-to-list '</span>package-archives <span class="string">'("melpa-stable" . "https://stable.melpa.org/packages/"))</span></span><br><span class="line"><span class="string">(package-initialize)</span></span><br></pre></td></tr></table></figure><p>然后,利用package功能安装auto-complete</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在emacs的minibuffer里选取以下一种命令安装auto-complete</span><br><span class="line">    M-x package-list-packages and select auto-complete</span><br><span class="line">    M-x package-refresh-contents and M-x package-install auto-complete</span><br></pre></td></tr></table></figure><p>最后，根据显示的安装路径，在.emacs中进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;; add auto-complete plugin</span><br><span class="line"></span><br><span class="line">(add-to-list <span class="string">'load-path </span></span><br><span class="line"><span class="string">"/home/hubery_lee/.emacs.d/elpa/auto-complete-20170125.245")</span></span><br><span class="line"><span class="string">(require '</span>auto-complete-config)</span><br><span class="line">(add-to-list <span class="string">'ac-dictionary-directories "/home/hubery_lee/.emacs.d/elpa/auto-complete-20170125.245/ac-dict")</span></span><br><span class="line"><span class="string">(ac-config-default)</span></span><br></pre></td></tr></table></figure><h2 id="自定义小功能"><a href="#自定义小功能" class="headerlink" title="自定义小功能"></a>自定义小功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">;;显示匹配的括号</span><br><span class="line">(show-paren-mode t) </span><br><span class="line"></span><br><span class="line">;;光标显示为一竖线</span><br><span class="line">(setq-default cursor-type <span class="string">'bar)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;;setting frame title </span></span><br><span class="line"><span class="string">(setq frame-title-format "%b - LiHui@CIRP")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;;鼠标指针避光标</span></span><br><span class="line"><span class="string">(mouse-avoidance-mode '</span>animate)</span><br><span class="line"></span><br><span class="line">;;不生成临时文件</span><br><span class="line">(setq-default make-backup-files nil)</span><br><span class="line">;;允许emacs和外部其他程序的粘贴</span><br><span class="line">(setq x-select-enable-clipboard t)</span><br><span class="line">;;使用鼠标中键可以粘贴</span><br><span class="line">(setq mouse-yank-at-point t)</span><br><span class="line">;; 自动的在文件末增加一新行</span><br><span class="line">;;(setq require-final-newline t)</span><br><span class="line">;; 当光标在行尾上下移动的时候，始终保持在行尾。</span><br><span class="line"></span><br><span class="line">;;color</span><br><span class="line">;;(add-to-list <span class="string">'load-path "~/.emacs.d/plugins")</span></span><br><span class="line"><span class="string">;;(require '</span>color-theme)</span><br><span class="line">;;(color-theme-subtle-hacker)</span><br><span class="line">;;(color-theme-xemacs)</span><br><span class="line">;;(color-theme-wheat)</span><br><span class="line">;;(color-theme-calm-forest)</span><br><span class="line">;;(color-theme-matrix)</span><br><span class="line">;;(color-theme-robin-hood)</span><br><span class="line">;;(color-theme-euphoria)</span><br><span class="line">;;(color-theme-arjen)</span><br><span class="line">;;(color-theme-jsc-dark)</span><br><span class="line"></span><br><span class="line">;;hide tool bar</span><br><span class="line">(tool-bar-mode 0)</span><br><span class="line"></span><br><span class="line">;; show line number</span><br><span class="line">(global-linum-mode <span class="string">'linum-mode)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emacs24.3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-VS-SVN</title>
      <link href="/2018/08/20/Git-VS-SVN/"/>
      <url>/2018/08/20/Git-VS-SVN/</url>
      
        <content type="html"><![CDATA[<h2 id="Git和SVN主要差别"><a href="#Git和SVN主要差别" class="headerlink" title="Git和SVN主要差别"></a>Git和SVN主要差别</h2><p>SVN只有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。<br>Git每一个终端都是一个仓库，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。每一次的提取操作，实际上都是一次对代码仓库的完整备份。Git不仅仅是个版本控制系统，它也是个内容管理系统（CMS），工作管理系统等。</p><h3 id="1-分布式VS集中式版本控制"><a href="#1-分布式VS集中式版本控制" class="headerlink" title="1.分布式VS集中式版本控制"></a>1.分布式VS集中式版本控制</h3><p>svn采用集中式版本控制</p><img src="/2018/08/20/Git-VS-SVN/08/20/Git-VS-SVN/20161214020406505.jpg" title="svn集中式版本控制"><p>git采用分布式版本控制</p><img src="/2018/08/20/Git-VS-SVN/08/20/Git-VS-SVN/20161214020603227.jpg" title="git分布式版本控制"><p>两种版本控制的区别：<br>（1）svn 过渡依赖中央服务器，出现故障影响其他工作;git中央服务器只用于方便交流，有没有中央服务器都行；<br>（2）svn 版本库只保存在中央服务器，本地检测时不会检出版本库；git每个本地电脑均会保存完整的版本库；<br>（3）svn 的commit依赖连接中央服务器的网络；git由于有本地版本库，可以commit不依赖网络，commit可以频繁使用；git 通过push来实现其他电脑的版本库的同步（synchronize）操作；</p><h3 id="2-分支功能"><a href="#2-分支功能" class="headerlink" title="2.分支功能"></a>2.分支功能</h3><p>（1）svn 创建分支就是创建了一个新文件夹并拥有实际的文件，类似于拷贝了一份源文件，相当于在服务器上创建了分支，会影响到连接服务器的所有本地工作副本；git创建分支并没有创建文件夹，创建分支只是多了一个索引文件，并记录这个分支的变化，占用空间小，分支之间可以自由切换互不影响。<br>（2）git具有代码审核功能，各个成员请求将自己的分子合并到主分支均需要管理人员进行审核。<br>git的工作流程如下：</p><img src="/2018/08/20/Git-VS-SVN/08/20/Git-VS-SVN/gitProcess.png" title="gitprocess"><h3 id="3-git的使用"><a href="#3-git的使用" class="headerlink" title="3.git的使用"></a>3.git的使用</h3><p>（1）安装配置<br>（2）pc上任意获取，运行git clone url，将远程版本库克隆到本地<br>（3）日常场景</p><img src="/2018/08/20/Git-VS-SVN/08/20/Git-VS-SVN/20180227165834705.png" title="日常使用"><p>a.创建一个新文件，并添加到版本库中使用命令：<br>创建了一个新文件，需要添加到版本库里（追踪此文件）使用git add filename命令，我想保存一下，使用git commit -m ….. 我想把我改变的推送给其他人（服务器）git push -u origin master(提交代码)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir newDoc</span><br><span class="line">$ git add newDoc</span><br></pre></td></tr></table></figure></p><p>b.保存一下修改记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"提交添加一个新文件到版本库"</span>  <span class="comment">#“”内为chang messages</span></span><br></pre></td></tr></table></figure></p><p>c.将我的修改推送给其他人或服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></p><p>我想把别人改变的代码拉去过来其实有两种方法git fetch与git pull。它们都是将从服务器上拉取最新的代码。那么它们什么区别呢？Git fetch 是仅仅将代码拉取下来，而git pull 不仅将服务器上的代码拉去下来，而且进行了合并merge。总结一下就是git pull 包含了 git fetch + merge。</p><p>d.将别人的代码拉取过来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p><p>我想把别人改变的代码拉去过来其实有两种方法git fetch与git pull。它们都是将从服务器上拉取最新的代码。那么它们什么区别呢？Git fetch 是仅仅将代码拉取下来，而git pull 不仅将服务器上的代码拉去下来，而且进行了合并merge。总结一下就是git pull 包含了 git fetch + git merge。</p><p>e.删除原来的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm file <span class="comment">#将会将file文件从暂存区与磁盘删除</span></span><br></pre></td></tr></table></figure></p><p>原来的有个文件，想删除了，使用git rm file(停止追踪文件并从磁盘上删除),如果我们只想将 停止追踪文件，但是不删除只需要 git rm –cached <file>。然后想把这个改变推送给别人，就应该是用git commit 然后git push 将自己的改变推送到git服务器。</file></p><p>f.git分支功能的使用<br>那么平时我们收到一个新功能的任务，应该是怎样的操作呢？比较正确的操作流程应该是这样，我们先使用git branch 查看一下我们本地到底有多少分支，然后我们先使用git branch <new branch>从develop分支新建一个分支featureN,然后使用git checkout &lt;branch/tag&gt; 切换到新建的featureN分支里。在新的分支里进行新功能开发。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="comment">#查看分支</span></span><br><span class="line">$ git branch <span class="comment">#新建分支featureN 即 &lt;new branch&gt;</span></span><br><span class="line">$ git checkout &lt;branch/tag&gt; <span class="comment">#切换到新建的featureN分支里，在新的分支里进行新功能的开发。</span></span><br></pre></td></tr></table></figure></new></p><p>g.恢复到某一时刻<br>我们在进行新功能开发的时候，每实现一个小功能的时候，我们就git commit 进行提交一下，刚提交完，突然发现，这次提交的东西会严重影响其他功能，想撤销这次提交，我们需要使用git reset –hart HEAD 来撤销工作目录中所有未提交文件的修改内容。那么如果我们想撤销指定的一次提交呢？我们需要使用git revert <commit> 进行指定的提交。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD <span class="comment">#撤回暂存中未提交的内容</span></span><br><span class="line">$ git revert &lt;commit&gt; <span class="comment">#撤回一次指到定的提交</span></span><br></pre></td></tr></table></figure></commit></p><p>h.分支的合并<br>假设开发完毕后，应该怎么做？对，就是将新功能的分支合并到develop分支里。就是先切换到develop分支里，然后使用git merge 命令进行合并。这时，新功能开发完毕，新建的featureN分支就没用了，我们使用git branch -d <branch>将无用的分支删除。至此，我们新功能开发完毕。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge </span><br><span class="line">$ git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure></branch></p><p>i.查看工作日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></p><p>Git log 作用很大，功能也很多</p>]]></content>
      
      
      <categories>
          
          <category> 编程工具学习与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
